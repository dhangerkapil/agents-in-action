{
  "version": "1.0",
  "python": [
    {
      "name": "minimal_sample",
      "category": "uncategorized",
      "file_path": "python\\samples\\getting_started\\minimal_sample.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\minimal_sample.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of the Agent Framework's OpenAIChatClient to create a weather information agent that responds dynamically to user queries. It showcases important functionalities of tool creation and query handling within the framework's environment, providing basic insights into constructing custom agents. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this sample to understand the adaptation of their agent logic to the Agent Framework methodology.",
      "tags": [
        "agent",
        "tools",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_chat_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\azure_ai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\azure_ai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the direct usage of the Azure AI Chat Client within the Agent Framework to interact with Azure AI models for natural language dialogues and function calling. It explains how developers can utilize authentication mechanisms with Azure services and implement custom logic for tool integration, providing insights for migration from frameworks such as Semantic Kernel or LangChain.",
      "tags": [
        "agent",
        "chat_client",
        "tools",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_assistants_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\azure_assistants_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\azure_assistants_client.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the usage of the `AzureOpenAIAssistantsClient` from the Agent Framework for interacting with Azure OpenAI assistants in a chat scenario. It illustrates how to authenticate with Azure credentials, make assistant requests using tools for augmented responses (e.g., retrieving weather information), and handle streaming outputs. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can use this guide to understand leveraging Azure's capabilities for advanced conversational AI implementations.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "azure_chat_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\azure_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\azure_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation and usage of the AzureOpenAIChatClient for interacting with Azure OpenAI's chat services. It showcases asynchronous responses, function calling capabilities, and integration with external tools such as weather information retrieval. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can use this sample to understand Azure OpenAI's chat integration specifics.",
      "tags": [
        "chat_client",
        "intermediate",
        "azure",
        "tools"
      ]
    },
    {
      "name": "azure_responses_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\azure_responses_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\azure_responses_client.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the usage of the AzureOpenAIResponsesClient within the Agent Framework for structured response generation. It showcases capabilities such as function calling and handling custom business logic for AI model interactions, while effectively utilizing Azure authentication mechanisms. Developers transitioning from other frameworks like Semantic Kernel, LangChain, or AutoGen can reference this example to understand integration with Azure-based tools for advanced structured outputs and streaming capabilities.",
      "tags": [
        "agent",
        "chat_client",
        "azure_integration",
        "structured_output"
      ]
    },
    {
      "name": "chat_response_cancellation",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\chat_response_cancellation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\chat_response_cancellation.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates how to use the OpenAIChatClient to handle cancellations of streaming chat responses effectively during asynchronous execution. Key concepts include managing asyncio tasks, implementing cancellation handling, and ensuring proper resource cleanup. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand best practices in controlling chat client tasks and handling interruptions.",
      "tags": [
        "chat_client",
        "intermediate",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\openai_assistants_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\openai_assistants_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of the OpenAIAssistantsClient class from the Agent Framework to interact with OpenAI-powered chat assistants. It highlights functionalities such as crafting responses to user messages and employing custom tools with defined functions for specific tasks. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain will find this guide useful to adapt their solutions for seamless integration.",
      "tags": [
        "chat_client",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides an example of direct usage of the OpenAIChatClient from the Agent Framework for interacting with OpenAI models. It includes functionality to handle natural language queries and demonstrates tool integration for extending capabilities, such as fetching weather information dynamically during interactions. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can leverage this sample to understand how to perform streaming and synchronous chat operations efficiently using the Agent Framework.",
      "tags": [
        "chat_client",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\openai_responses_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\openai_responses_client.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the basic usage of the OpenAIResponsesClient class from the Agent Framework to generate structured responses using OpenAI models. It includes examples of integrating custom functions for enhanced user interaction capabilities, such as retrieving weather information based on input. Developers migrating from other frameworks like AutoGen or LangChain can reference this for insights on employing tool integration and asynchronous response modes.",
      "tags": [
        "chat_client",
        "structured_output",
        "tools",
        "autogen_migration"
      ]
    },
    {
      "name": "simple_context_provider",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\simple_context_provider.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\simple_context_provider.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the implementation of a context provider for user-specific information within an agent framework. It showcases the utilization of asynchronous programming for extracting structured user data from messages and dynamically updating context in conversations. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can leverage this example to understand dynamic memory management and context utilization in agent-driven workflows.",
      "tags": [
        "agent",
        "middleware",
        "semantic_kernel_migration",
        "structured_output"
      ]
    },
    {
      "name": "in_memory_mode",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\in_memory_mode.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\in_memory_mode.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the implementation of an in-memory entity registration system using the Agent Framework DevUI. It includes the creation of agents equipped with tools, a simple workflow with executors, and demonstrates the provision of OpenAI-compatible API endpoints for these entities. Developers transitioning from frameworks such as AutoGen, Semantic Kernel, or LangChain can use this guide to understand alternative methods for building flexible agent-based systems.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "agent_as_mcp_server",
      "category": "mcp",
      "file_path": "python\\samples\\getting_started\\mcp\\agent_as_mcp_server.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\mcp\\agent_as_mcp_server.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample illustrates how to utilize the Agent Framework to set up and use an agent as a Micro Control Protocol (MCP) server. The example demonstrates key functionalities such as creating and configuring an agent, as well as implementing a lightweight bidirectional server architecture. This guide is essential for developers transitioning from other AI frameworks, providing practical insights into implementing agent-based server solutions.",
      "tags": [
        "agent",
        "mcp_server",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "mcp_api_key_auth",
      "category": "mcp",
      "file_path": "python\\samples\\getting_started\\mcp\\mcp_api_key_auth.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\mcp\\mcp_api_key_auth.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to establish API key-based authentication with MCP servers using the Agent Framework in Python. It utilizes tools such as `MCPStreamableHTTPTool` alongside `ChatAgent` to showcase implementing server communication and AI-driven interactions effectively. Developers migrating from frameworks like AutoGen or Semantic Kernel can utilize this example to understand how to integrate APIs securely and leverage the modular tool-based structure of Agent Framework.",
      "tags": [
        "agent",
        "api_authentication",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "agent_and_run_level_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\agent_and_run_level_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\agent_and_run_level_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of agent-level and run-level middleware within the Agent Framework in a Python context. It illustrates multiple middleware types, including security checking, performance monitoring, priority handling, debugging, and caching, showcasing their applications and interaction hierarchies during agent operations. Developers migrating from frameworks such as Semantic Kernel or LangChain can utilize this guide to understand and adapt middleware concepts effectively.",
      "tags": [
        "middleware",
        "agent",
        "semantic_kernel_migration",
        "advanced"
      ]
    },
    {
      "name": "chat_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\chat_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\chat_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the implementation and use of middleware within the Agent Framework for intercepting, monitoring, and modifying chat messages. It covers both class-based and function-based approaches, providing techniques to apply middleware globally or per specific runs, enabling functionalities like security filtering and input augmentation. Developers migrating from platforms like Semantic Kernel or LangChain can utilize this guidance to seamlessly transition to using middleware in the Agent Framework environment.",
      "tags": [
        "agent",
        "middleware",
        "chat",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "class_based_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\class_based_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\class_based_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates using class-based middleware patterns within the Agent Framework. It introduces stateful middleware components for security analysis and function execution logging, showcasing their implementation and integration. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this pattern beneficial for implementing advanced middleware scenarios aligned with object-oriented practices.",
      "tags": [
        "middleware",
        "agent",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "decorator_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\decorator_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\decorator_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of middleware in the Agent Framework using decorators such as @agent_middleware and @function_middleware. It highlights the explicit declaration of middleware types without the need for type annotations, ensuring clarity and reduced error potential. Developers migrating from frameworks like AutoGen or Semantic Kernel can leverage this sample to understand middleware classification and usage patterns in Agent Framework.",
      "tags": [
        "middleware",
        "agent",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "exception_handling_with_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\exception_handling_with_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\exception_handling_with_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of middleware for centralized exception handling within the Agent Framework. It highlights techniques to intercept exceptions during function execution, provide user-friendly error responses, and apply fallback mechanisms while enhancing the functionality of autonomous agents built using Azure AI. Developers transitioning from frameworks like AutoGen or LangChain can leverage this example to understand efficient error-handling patterns in middleware.",
      "tags": [
        "middleware",
        "agent",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "function_based_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\function_based_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\function_based_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of function-based middleware within the Agent Framework to enhance agent capabilities. Two middleware examples are provided: 'security_agent_middleware', which ensures secure interactions by checking requests for sensitive information, and 'logging_function_middleware', which monitors and logs function execution time for performance analysis. This code is beneficial for developers transitioning from platforms like Semantic Kernel, AutoGen, or LangChain, where customization of agent behavior is a priority.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "middleware_termination",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\middleware_termination.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\middleware_termination.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates implementing and using middleware mechanisms to manage execution criteria within the Agent Framework for conversational applications. Specifically, it showcases creating middleware that terminates execution either before processing or after certain conditions are satisfied, such as specific word occurrences or response limits. Developers migrating from frameworks like Autogen, Semantic Kernel, or LangChain can use this as a reference for incorporating middleware functionalities for managing agent processing behaviors and custom response routing.",
      "tags": [
        "middleware",
        "agent",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "override_result_with_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\override_result_with_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\override_result_with_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of middleware in an agent framework to override the results of an executed function, working seamlessly for both regular and streaming responses. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can explore how to apply middleware for advanced functionality such as content filtering or enhancement.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "shared_state_middleware",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\shared_state_middleware.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\shared_state_middleware.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of function-based middleware within a Python class using a shared state for enhanced contextual interactions. It showcases key concepts of the Agent Framework such as middleware chaining, state management, and asynchronous programming, using tools for weather and time data retrieval. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this to understand effective middleware design in shared agent contexts.",
      "tags": [
        "middleware",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_multimodal",
      "category": "multimodal_input",
      "file_path": "python\\samples\\getting_started\\multimodal_input\\azure_chat_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\multimodal_input\\azure_chat_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the implementation of a multimodal input processing system utilizing the Azure OpenAI Chat Completions API. It demonstrates the ability to analyze and respond to image data provided by the user leveraging the Agent Framework's abstractions such as ChatMessage and DataContent. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can use this example to explore multimodal capabilities integrated into an Azure-based setup.",
      "tags": [
        "agent",
        "multimodal",
        "workflow",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_multimodal",
      "category": "multimodal_input",
      "file_path": "python\\samples\\getting_started\\multimodal_input\\azure_responses_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\multimodal_input\\azure_responses_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of Azure OpenAI Responses API within a multimodal input context using the Agent Framework. It shows how to process PDF documents and images to extract contextual information and respond within a chat-based interface. Developers transitioning from frameworks like Semantic Kernel or LangChain can benefit from understanding the integration of multimodal data handling in modern applications.",
      "tags": [
        "multimodal",
        "agent",
        "azure_integration",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_multimodal",
      "category": "multimodal_input",
      "file_path": "python\\samples\\getting_started\\multimodal_input\\openai_chat_multimodal.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\multimodal_input\\openai_chat_multimodal.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates leveraging the Agent Framework's OpenAIChatClient to process multimodal input data types, including images, audio, and PDF documents. It showcases the construction of ChatMessage objects with various data contents and the invocation of the AI model for analysis and response generation. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this example to understand how multimodal inputs can be integrated and handled efficiently using the Agent Framework.",
      "tags": [
        "multimodal",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "advanced_manual_setup_console_output",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\advanced_manual_setup_console_output.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\advanced_manual_setup_console_output.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases advanced manual configurations for observability in Python applications using the OpenTelemetry library. It covers setting up automated logging, metrics reporting, and tracing capabilities with console exporters, demonstrating how developers can manually configure these essential components. This example is ideal for developers migrating from frameworks such as Semantic Kernel or LangChain, providing insights for implementing detailed monitoring and debugging setups.",
      "tags": [
        "observability",
        "advanced",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "advanced_zero_code",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\advanced_zero_code.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\advanced_zero_code.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates advanced observability setup using the Agent Framework with zero code changes, leveraging OpenTelemetry's auto-instrumentation through environment variable configuration. It showcases the integration of OpenAIResponsesClient alongside tracing of AI operations, enabling streamlined data collection for detailed analysis and monitoring. Developers migrating from frameworks like AutoGen or Semantic Kernel can utilize this sample to understand and implement comprehensive telemetry without extensive refactoring.",
      "tags": [
        "observability",
        "advanced",
        "autogen_migration",
        "agent"
      ]
    },
    {
      "name": "agent_observability",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\agent_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\agent_observability.py",
      "language": "python",
      "processed": true,
      "description": "This example showcases the integration of observability features within the Agent Framework using the OpenTelemetry library. It explores how to configure tracing for agents and demonstrates monitoring message exchanges and tool invocations in a conversational agent scenario. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain should consult this sample for techniques in adding observability measures to their AI applications.",
      "tags": [
        "observability",
        "agent",
        "chat_client",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_agent_observability",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\azure_ai_agent_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\azure_ai_agent_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates implementing observability within an Azure AI project using the Agent Framework for tracing and telemetry data collection through Application Insights. It illustrates how to configure observability for chat-based agents and includes examples of handling weather-related queries. Developers migrating from frameworks like Semantic Kernel or LangChain can refer to this example for integrating observability and telemetry in their agent workflows.",
      "tags": [
        "agent",
        "observability",
        "azure_ai",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_chat_client_with_observability",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\azure_ai_chat_client_with_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\azure_ai_chat_client_with_observability.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates implementing observability within an Azure AI project utilizing the Agent Framework's AzureAIAgentClient and Application Insights integration. It provides an asynchronous telemetry-enabled workflow for interacting with AI and custom tools such as weather data. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will benefit by understanding how to integrate advanced telemetry and agent-based AI interactions seamlessly into their applications.",
      "tags": [
        "agent",
        "observability",
        "azure_ai",
        "autogen_migration"
      ]
    },
    {
      "name": "setup_observability_with_env_var",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\setup_observability_with_env_var.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\setup_observability_with_env_var.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate observability into an application using the Agent Framework, specifically through the `setup_observability` function with environment variables. It includes practical scenarios showcasing telemetry collection for AI functions and chat services, with detailed configuration options for logging, tracing, and metrics collection. Developers transitioning from frameworks like Semantic Kernel and LangChain will find this example useful for understanding observability features in the Agent Framework.",
      "tags": [
        "observability",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "setup_observability_with_parameters",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\setup_observability_with_parameters.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\setup_observability_with_parameters.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates setting up observability in applications utilizing the Agent Framework. It covers the use of inline parameters for configuring telemetry outputs, including logs and metrics, with support for OTLP and Application Insights integration. Developers migrating from frameworks such as LangChain or Semantic Kernel should reference this sample to learn efficient observability configurations for their AI-driven workflows.",
      "tags": [
        "observability",
        "agent",
        "middleware",
        "langchain_migration"
      ]
    },
    {
      "name": "workflow_observability",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\workflow_observability.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\workflow_observability.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the integration of observability components within the Agent Framework workflows. It demonstrates the implementation of a sequential workflow that includes text transformations and traces its execution using OpenTelemetry. This guide is ideal for developers migrating from frameworks like Semantic Kernel or LangChain, seeking insights into setting up tracing and monitoring for agent-based applications.",
      "tags": [
        "workflow",
        "observability",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "sample_purview_agent",
      "category": "purview_agent",
      "file_path": "python\\samples\\getting_started\\purview_agent\\sample_purview_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\purview_agent\\sample_purview_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates integrating Microsoft Purview policy enforcement with the Agent Framework in Python. Developers are guided through setting up a basic chat agent, adding middleware for Purview policy evaluation both at the agent level and through the chat client, and executing threaded user conversations. This example is ideal for developers transitioning from other frameworks, such as Semantic Kernel, AutoGen, or LangChain, who wish to incorporate compliance enforcement capabilities into their agents.",
      "tags": [
        "agent",
        "middleware",
        "purview_integration",
        "autogen_migration"
      ]
    },
    {
      "name": "custom_chat_message_store_thread",
      "category": "threads",
      "file_path": "python\\samples\\getting_started\\threads\\custom_chat_message_store_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\threads\\custom_chat_message_store_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample illustrates how to implement a custom chat message store for managing conversational threads with an Agent Framework. It demonstrates the usage of custom storage protocols by extending the ChatMessageStoreProtocol and integration with OpenAI ChatClient for initiating conversational agents. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this sample to explore advanced customization options for conversational data persistence.",
      "tags": [
        "agent",
        "threads",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "redis_chat_message_store_thread",
      "category": "threads",
      "file_path": "python\\samples\\getting_started\\threads\\redis_chat_message_store_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\threads\\redis_chat_message_store_thread.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates managing conversation threads and persistent storage using Redis in the Agent Framework. It explores message persistence, session management, and continuity of conversations between client and agent across application lifecycles. Developers migrating from alternative conversation AI frameworks such as AutoGen or Semantic Kernel can leverage this sample to understand thread-based message management using Redis as a storage backend.",
      "tags": [
        "agent",
        "redis",
        "chat_client",
        "autogen_migration"
      ]
    },
    {
      "name": "suspend_resume_thread",
      "category": "threads",
      "file_path": "python\\samples\\getting_started\\threads\\suspend_resume_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\threads\\suspend_resume_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to suspend and resume threads in the Agent Framework. The functionality includes creating a managed thread with the OpenAI Chat Client and interacting with resumed threads after serialization and deserialization. Developers transitioning from frameworks such as AutoGen or Semantic Kernel can reference this sample to understand thread management in a conversational AI application.",
      "tags": [
        "threads",
        "agent",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "ai_tool_with_approval",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\ai_tool_with_approval.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\ai_tool_with_approval.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of advanced tools within the Agent Framework requiring user approvals before executing specific AI-generated actions, focusing on weather information retrieval. It includes synchronous and streaming interaction patterns, user input requests, and approval workflows without relying on traditional threading. Developers migrating from frameworks like AutoGen or LangChain can use this as a guide to understanding human-in-the-loop workflows for AI interaction within the Agent Framework.",
      "tags": [
        "tools",
        "human_in_loop",
        "agent",
        "langchain_migration"
      ]
    },
    {
      "name": "ai_tool_with_approval_and_threads",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\ai_tool_with_approval_and_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\ai_tool_with_approval_and_threads.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the utilization of tool approval mechanisms within threaded contexts using the Agent Framework. It demonstrates key features such as setting approval modes for functions, handling user interactions for granting or rejecting requests, and leveraging threading to maintain conversation state. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain will find this particularly useful for understanding how to implement interactive decision-making workflows in conversational agents.",
      "tags": [
        "agent",
        "tools",
        "human_in_loop",
        "intermediate"
      ]
    },
    {
      "name": "failing_tools",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\failing_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\failing_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the structured handling of tool exceptions within an agent context under the Agent Framework. It shows how an agent can recover gracefully and continue functioning by analyzing the exception and determining appropriate responses or retries. Developers transitioning from other frameworks like AutoGen or Semantic Kernel can leverage this pattern for effective error management when integrating tools.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "tool_with_injected_func",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\tool_with_injected_func.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\tool_with_injected_func.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of the Agent Framework to create an AIFunction tool through dependency injection. It illustrates concepts such as tool deserialization from a dictionary and runtime function injection to enable dynamic AI functionality, emphasizing its adaptability and extensibility. Developers transitioning from frameworks like AutoGen or Semantic Kernel can reference this example to understand how to employ dependency injection for customizing AI tools.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "final_test_report",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\final_test_report.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\final_test_report.py",
      "language": "python",
      "processed": true,
      "description": "This Python script provides a workflow for testing Jupyter notebooks to ensure compatibility with updated Azure OpenAI configurations, primarily focusing on validating syntax of initial cells. It organizes notebooks into categories, evaluates their status and Azure OpenAI usage, and generates a comprehensive report to identify potential issues and maintain code quality. This sample is valuable for developers migrating from frameworks like Semantic Kernel or LangChain, providing guidelines for integrated testing and validation of multi-notebook workflows.",
      "tags": [
        "workflow",
        "semantic_kernel_migration",
        "observability",
        "intermediate"
      ]
    },
    {
      "name": "fix_fan_out",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\fix_fan_out.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\fix_fan_out.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates a technique for modifying Jupyter notebooks used within the Agent Framework to optimize code execution. Specifically, it addresses the scenario where the `load_dotenv` function is located inside an import block and repositions it appropriately to ensure correct functionality. Developers migrating from frameworks such as Semantic Kernel or LangChain can refer to this sample when adapting similar environment setup patterns to Agent Framework workflows.",
      "tags": [
        "workflow",
        "intermediate",
        "langchain_migration",
        "fan_out"
      ]
    },
    {
      "name": "fix_missing_newlines",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\fix_missing_newlines.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\fix_missing_newlines.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates a function for correcting formatting issues within Jupyter notebook files by ensuring proper placement of newline characters. It also showcases the application of robust file handling, JSON manipulation, and regex operations to maintain coding standards in collaborative development environments. Developers migrating from frameworks like LangChain or AutoGen can utilize this as a utility for preparing notebooks for use in workflows.",
      "tags": [
        "workflow",
        "intermediate",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "fix_syntax_in_imports",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\fix_syntax_in_imports.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\fix_syntax_in_imports.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates a workflow for automating the correction of misplacements of the 'load_dotenv' function call within Jupyter notebooks, specifically for projects involving the Agent Framework. By iterating through specified notebook files, it identifies improper placements within import blocks, reorganizes the code to correct issues, and introduces missing environment configuration definitions if required. Developers transitioning from frameworks such as Semantic Kernel or AutoGen can utilize this example to understand notebook adjustments and script refactoring for seamless integration into their existing workflows.",
      "tags": [
        "workflow",
        "agent",
        "semantic_kernel_migration",
        "autogen_migration"
      ]
    },
    {
      "name": "fix_syntax_simple",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\fix_syntax_simple.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\fix_syntax_simple.py",
      "language": "python",
      "processed": true,
      "description": "This script demonstrates fixing specific syntax issues in Jupyter notebooks, particularly adjusting the placement of `load_dotenv()` and inserting necessary environmental variable assignments related to agent frameworks. This guide is essential for developers migrating from other platforms (such as Semantic Kernel or LangChain) seeking to standardize their codebase conforming to best practices in notebook execution workflows.",
      "tags": [
        "workflow",
        "intermediate",
        "semantic_kernel_migration",
        "syntax_fix"
      ]
    },
    {
      "name": "test_all_notebooks",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\test_all_notebooks.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\test_all_notebooks.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to test Jupyter notebooks within a project for syntax validity and specific configuration requirements. It iterates through all notebook files, examining the first code cell to identify syntax issues and the presence of configurations, such as dotenv and libraries like AzureOpenAIChatClient. This script is beneficial for developers migrating from frameworks like Semantic Kernel or LangChain, ensuring their notebooks conform to expected standards and prerequisites during the migration process.",
      "tags": [
        "workflow",
        "intermediate",
        "semantic_kernel_migration",
        "tools"
      ]
    },
    {
      "name": "agent_with_a2a",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\a2a\\agent_with_a2a.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\a2a\\agent_with_a2a.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate the A2A (Agent-to-Agent) protocol within the Agent Framework to establish communication with external agents through standardized endpoints. Key concepts include discovering compliant agents using AgentCards, creating and configuring A2AAgent instances, and managing message exchange according to the protocol specifications. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this for understanding effective inter-agent communication strategies.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "anthropic_with_openai_chat_client",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\anthropic\\anthropic_with_openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\anthropic\\anthropic_with_openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate Anthropic's API with the OpenAI Chat Client to create a conversational agent capable of providing weather information. It covers both synchronous and asynchronous streaming functionalities within the Agent Framework. This is particularly useful for developers migrating from frameworks like AutoGen or LangChain to leverage advanced compatibility and reusable tool methods.",
      "tags": [
        "agent",
        "sematic_kernel_migration",
        "streaming",
        "intermediate"
      ]
    },
    {
      "name": "azure_ai_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the utilization of the AzureAIAgentClient for implementing agents with lifecycle management in Python, showcasing concepts such as both streaming and non-streaming response handling, as well as integrating functional tools to enhance agent capabilities. Developers familiar with frameworks like AutoGen, Semantic Kernel, or LangChain can refer to this example to understand the basics of transitioning to the Azure AI Agent Framework, focusing on authentication and simple query handling.",
      "tags": [
        "agent",
        "azure",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_azure_ai_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_azure_ai_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_azure_ai_search.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates integrating Azure AI capabilities with hotel data search functionalities utilizing the Agent Framework. It showcases the creation and use of a chat agent equipped with Azure AI Search, allowing developers to implement seamless interactions with an indexed data source. This sample is ideal for developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain, looking for practical applications involving smart search agents combined with conversational AI.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "azure_ai_with_bing_grounding",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_bing_grounding.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_bing_grounding.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the creation of an Azure AI agent using the Agent Framework that utilizes Bing Grounding for real-time web searches. Developers will learn to integrate and leverage Azure AI's HostedWebSearchTool to implement up-to-date information retrieval capabilities in their conversational agents. This is particularly beneficial for developers migrating from frameworks like AutoGen or LangChain, aiming to incorporate Azure AI's advanced service connections.",
      "tags": [
        "agent",
        "intermediate",
        "tools",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the HostedCodeInterpreterTool within the Azure AI Agent ecosystem to execute Python code dynamically for computational tasks, such as generating factorials. It covers concepts like agent creation using Azure AI Agent Client, integration of authentication mechanisms, and handling streamed responses for iterative outputs. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for incorporating programmatic code execution functionalities within AI workflows.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_existing_agent",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_existing_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_existing_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases how to use pre-existing Azure AI agents with the Agent Framework, integrating Azure-specific clients for agent management and operation. It demonstrates instantiation of remote Azure agents, leveraging existing agent identifiers for task execution, and implementing specific behavioral instructions. Developers interested in transitioning to Agent Framework from AutoGen, Semantic Kernel, or LangChain should reference this sample to understand collaboration between cloud-based and local configurations.",
      "tags": [
        "agent",
        "advanced",
        "azure_integration",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_existing_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_existing_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_existing_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample illustrates the use of the Azure AI Agent to interact with existing conversation threads, enabling thread reuse in applications. It demonstrates the integration of Azure AI services, techniques for managing threads programmatically, and employing tools for enhancing agent capabilities. Developers migrating from other frameworks such as AutoGen, Semantic Kernel, or LangChain may reference this example to understand advanced thread management and Azure AI integration.",
      "tags": [
        "agent",
        "azure_ai",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "azure_ai_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the use of Azure AI with explicit configuration settings within an Agent Framework context. It showcases creating a ChatAgent and integrates it with the AzureAIAgentClient for executing queries against an AI model using specific configurations. Developers can use this guide when migrating from frameworks like LangChain, Semantic Kernel, or AutoGen to effectively configure and utilize Azure AI services within their projects.",
      "tags": [
        "agent",
        "azure_integration",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_ai_with_file_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of an Azure AI agent that leverages file search tools to interact with and extract insights from uploaded documents. This highlights usage of Agent Framework's HostedFileSearchTool for resource integration and ChatAgent for conversational capabilities. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand resource handling and dynamic interaction patterns.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates integrating function tools with Azure AI Chat Agents using the Agent Framework. It illustrates agent-level tool configuration and query-specific tool utilization, showcasing dynamic tool assignment and interaction with Azure AI services. Developers migrating from frameworks like Semantic Kernel or LangChain can use this example to understand tool chaining and custom function integration within the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "azure_ai",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_ai_with_hosted_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_hosted_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_hosted_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of AzureAI Agents with hosted Model Context Protocol (MCP) servers using the Agent Framework, including a secure user approval workflow for function execution. Developers migrating from systems like AutoGen or Semantic Kernel should reference this example for implementing human-in-loop interactivity and leveraging hosted tools in their projects.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "azure_ai_with_local_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the integration of Azure AI with the Agent Framework and local Model Context Protocol (MCP) servers. It provides examples of tool configuration both at the agent level and runtime. Developers transitioning from other frameworks such as LangChain or Semantic Kernel can refer to this guide to understand effective strategies for incorporating Azure AI agents and leveraging agent-level tools.",
      "tags": [
        "agent",
        "azure_integration",
        "langchain_migration",
        "tools"
      ]
    },
    {
      "name": "azure_ai_with_multiple_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_multiple_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_multiple_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of Azure AI services with multiple tools using the Agent Framework, showcasing capabilities such as hosted tool usage and user approval workflows. It covers key concepts like asynchronous operations, threading, and handling user input requests in chat interactions. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this to understand implementing Azure AI agent workflows with advanced tooling support.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "azure_ai_with_openapi_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_openapi_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_openapi_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to create an Azure AI agent utilizing OpenAPI tools for handling and responding to user prompts. It illustrates key concepts such as loading OpenAPI specifications, creating OpenAPI tools, and integrating them with an agent implementation while preserving conversation context across multiple interactions. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample essential for learning to work with structured API integrations in the context of Azure AI Agents.",
      "tags": [
        "agent",
        "tools",
        "openapi",
        "intermediate"
      ]
    },
    {
      "name": "azure_ai_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\azure_ai_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of Azure AI Agents within a python-based threading environment, showcasing automatic thread creation, thread persistence for maintaining context between interactions, and usage of existing thread IDs for continued conversations. The example highlights key functionalities of the Agent Framework, making it particularly useful for developers transitioning from frameworks like LangChain, Semantic Kernel, or AutoGen to understand advanced threading and session management in Azure AI integrations quickly.",
      "tags": [
        "agent",
        "azure_ai",
        "advanced",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_assistants_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the fundamental usage of the AzureOpenAIAssistantsClient from the Azure AI Agent Framework. It illustrates how to create a weather assistant that responds dynamically using both non-streaming and streaming methods. Developers transitioning from frameworks like Semantic Kernel, LangChain, or AutoGen should study this example to understand implementing Azure's managed assistant lifecycle and tool integrations.",
      "tags": [
        "agent",
        "azure_openai",
        "beginner",
        "streaming"
      ]
    },
    {
      "name": "azure_assistants_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of an Azure OpenAI Assistant using the `agent_framework` system, featuring the `HostedCodeInterpreterTool` for executing Python code and solving mathematical problems. It introduces key agent concepts such as streaming response processing and tool integration for enhanced capabilities. This guide is valuable for developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain to understand workflows and tool usage in the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "azure_assistants_with_existing_assistant",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_existing_assistant.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_existing_assistant.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to integrate pre-existing Azure OpenAI assistants into a Python application using the ChatAgent API. It covers concepts such as assistant ID handling and the utilization of Azure OpenAI APIs with credentials and authentication mechanisms essential for production-ready applications. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain will find this example valuable for learning how to adapt and incorporate advanced agent functionalities.",
      "tags": [
        "agent",
        "azure_openai",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "azure_assistants_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates using the Azure OpenAI Assistants framework to create an assistant agent with explicit settings such as endpoint, deployment name, and authentication method. It highlights integration with Azure OpenAI for building a task-specific assistant providing weather information. Developers transitioning from frameworks like AutoGen or LangChain can leverage this example to understand configuring assistants with predefined parameters for seamless functionality.",
      "tags": [
        "agent",
        "azure_openai",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_assistants_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample showcases the integration of function tools with Azure OpenAI Assistants within the Agent Framework. It demonstrates three approaches for incorporating tools: defining them at the agent level, passing them at the query level, and a combination of both methods. Developers migrating from other frameworks like LangChain and Semantic Kernel can leverage this example to understand flexible methods for tool integration and enhance their applications using Azure's AI capabilities.",
      "tags": [
        "agent",
        "tools",
        "azure_openai",
        "langchain_migration"
      ]
    },
    {
      "name": "azure_assistants_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_assistants_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the implementation of Azure OpenAI Assistants with thread management using the Agent Framework, showcasing scenarios of automatic thread creation, thread persistence, and interaction with existing thread IDs. Developers will gain insights into leveraging these techniques for enhancing context retention and optimizing conversational agents. Ideal for those migrating from frameworks such as Semantic Kernel or AutoGen seeking to utilize Azure OpenAI Assistants.",
      "tags": [
        "agents",
        "azure_openai",
        "chat_client",
        "intermediate"
      ]
    },
    {
      "name": "azure_chat_client_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the usage of AzureOpenAIChatClient for creating chat-based agents with both streaming and non-streaming responses. It highlights core functionalities of the Agent Framework, such as agent creation, tool integration, and processing user queries. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain will find this sample beneficial for understanding Azure OpenAI integration and agent deployment.",
      "tags": [
        "agent",
        "azure_chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides an implementation of an Azure OpenAI Chat Client utilizing explicit configuration settings rather than environment variables. It demonstrates fundamental interactions between an agent and tools, showcasing the integration between Azure services and the Agent Framework, with a focus on authenticating using Azure CLI credentials. Developers transitioning from frameworks like Semantic Kernel or AutoGen can reference this example to understand Azure OpenAI-specific configurations and practical tool integrations.",
      "tags": [
        "agent",
        "azure_openai",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "azure_chat_client_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates integrating tools with an Azure OpenAI Chat Client using the Agent Framework. It provides examples of tool configuration at both the agent and query levels, showcasing the flexibility and dynamic adaptability of AI-driven workflows. Developers migrating from frameworks such as LangChain or AutoGen should reference this code to understand a structured approach to augment agent capabilities.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "azure_chat_client_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_chat_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the utilization of thread management features provided by the Azure OpenAI Chat Client within an agent framework environment. It showcases scenarios for automatic thread creation, persistent thread usage for maintaining context, and restoring conversation threads from message history. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand advanced threading capabilities and effective management strategies for enhanced conversational agent interactions.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "azure_responses_client_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of AzureOpenAIResponsesClient in the Agent Framework to handle both streaming and non-streaming structured response generation. It includes practical examples of creating a weather information agent using predefined tools and interacting with it via queries. Developers migrating from frameworks like AutoGen or Semantic Kernel will find insights into utilizing the Agent Framework for advanced response handling and agent creation.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "azure_responses_client_code_interpreter_files",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_code_interpreter_files.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_code_interpreter_files.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the integration of the HostedCodeInterpreterTool with Azure OpenAI Responses for performing Python code execution and data analysis tasks on user-uploaded files. The example covers instantiating the ChatAgent with Microsoft Agent Framework, interfacing with Azure OpenAI services using AsyncAzureOpenAI, and executing analytical queries on supplied data. Developers migrating from frameworks like Semantic Kernel and AutoGen can refer to this sample as a guide to implementing similar capabilities using Azure OpenAI Services.",
      "tags": [
        "agent",
        "tools",
        "azure_openai_integration",
        "code_interpreter"
      ]
    },
    {
      "name": "azure_responses_client_image_analysis",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_image_analysis.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_image_analysis.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of the Azure OpenAI Responses Client to construct agents capable of analyzing images and processing multimodal inputs within the Agent Framework. It shows how to create a user query containing both textual and image data, and how to receive responses using vision capabilities. Developers transitioning from frameworks like AutoGen and Semantic Kernel will find this sample instrumental for learning multimodal interaction in Azure-based implementations.",
      "tags": [
        "agent",
        "multimodal",
        "azure_openai",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the utilization of the AzureOpenAIResponsesClient integrated with the HostedCodeInterpreterTool for processing natural language queries and executing Python code. It provides a demonstration of creating and interacting with a ChatAgent, showcasing the abilities to process user input, generate Python code, and execute it for mathematical computation. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain can leverage this guide to understand the implementation patterns and integrations available in the Agent Framework.",
      "tags": [
        "agent",
        "autogen_migration",
        "tools",
        "structured_output"
      ]
    },
    {
      "name": "azure_responses_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample elaborates on configuring and utilizing the Azure OpenAI Responses Client by manually specifying the endpoint, deployment details, and credentials, bypassing reliance on environment variables. It encapsulates concepts like agent creation and tool integration for effective conversational AI systems. Developers transitioning from frameworks such as Semantic Kernel, AutoGen, or LangChain should reference this example to comprehend explicit configuration practices within the Agent Framework.",
      "tags": [
        "agent",
        "intermediate",
        "azure_tools",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the implementation of a ChatAgent from the Agent Framework, utilizing the AzureOpenAIResponsesClient along with function-based tools for query processing. It showcases three approaches to integrate tools into the agent: defining at the agent level, passing dynamically during runtime, and combining both methods. Developers transitioning from frameworks such as AutoGen, Semantic Kernel, or LangChain will find this example valuable for understanding advanced context-aware functionalities and tool management in multi-query scenarios.",
      "tags": [
        "agent",
        "autogen_migration",
        "tools",
        "advanced"
      ]
    },
    {
      "name": "azure_responses_client_with_local_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of Azure OpenAI Responses Client with a local Model Context Protocol (MCP) server using the Agent Framework. It introduces concepts such as tool management, agent creation, and authenticated Azure API usage. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this sample to understand MCP server integration and Azure-specific agent functionalities.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "azure_responses_client_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\azure_responses_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates how to manage conversation threads with the Azure OpenAI Responses Client integrated using the Agent Framework. It covers techniques for automatic thread creation, in-memory thread persistence, and utilizing existing server-side thread IDs for maintaining context in conversations. Developers migrating from frameworks like AutoGen or Semantic Kernel can use this sample to understand advanced context management and threading approaches.",
      "tags": [
        "agent",
        "azure_openai",
        "chat_client",
        "advanced"
      ]
    },
    {
      "name": "copilotstudio_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\copilotstudio\\copilotstudio_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\copilotstudio\\copilotstudio_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the foundational use of the Copilot Studio Agent within the Microsoft Agent Framework, emphasizing both streaming and non-streaming responses for queries provided to the agent. It facilitates understanding of agent initialization, environment configuration, and query handling mechanisms. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can benefit from this sample to explore the unique capabilities and integration approaches of Copilot Studio Agent.",
      "tags": [
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "streaming"
      ]
    },
    {
      "name": "copilotstudio_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\copilotstudio\\copilotstudio_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\copilotstudio\\copilotstudio_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the setup of a CopilotStudioAgent from Microsoft's Agent Framework using explicit connection settings and token authentication. It illustrates two approaches to configure and utilize the agent: one via connection settings and client implementation and another through direct parameter initialization. Developers migrating from frameworks like AutoGen or LangChain might utilize this sample to understand how custom configurations for Copilot Studio agents can be achieved for tailored deployment environments.",
      "tags": [
        "agent",
        "advanced",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "custom_agent",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\custom\\custom_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\custom\\custom_agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides an implementation of a custom agent within the Agent Framework by extending the BaseAgent class. It demonstrates key functionalities such as handling streaming and non-streaming responses, enhancing user interaction by processing input messages, and detailing initialization parameters of custom agents. This example is particularly useful for developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain to understand the principles of agent creation and customization.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "custom_chat_client",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\custom\\custom_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\custom\\custom_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a customized chat client by extending the BaseChatClient class within the Agent Framework. It covers creating non-streaming and streaming responses, integrating middleware, and leveraging advanced functionalities such as function invocation support. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can use this example to understand client customization and agent integration in the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "ollama_with_openai_chat_client",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\ollama\\ollama_with_openai_chat_client.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\ollama\\ollama_with_openai_chat_client.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the integration of the Ollama model with the OpenAI Chat Client, illustrating both non-streaming and streaming interaction modes. It showcases the setup required to adapt the OpenAIChatClient for utilizing local AI inference through Ollama at a specified endpoint. This example is particularly useful for developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain, as it highlights the use of local model hosting coupled with agent-based queries and custom tools.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of the OpenAIAssistantsClient within the Agent Framework for creating conversational agents to interactively retrieve weather information. It highlights the creation and management of agents along with usage in both streaming and non-streaming response modes, showcasing how tools can enhance the assistant's functionality. Developers transitioning from frameworks such as AutoGen, Semantic Kernel, or LangChain can use this example to learn the basics of implementing scalable and lightweight conversational agents.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_assistants_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of the OpenAI Assistants framework with the HostedCodeInterpreterTool to perform Python code execution and complex computations. It highlights key features like streaming responses and tool usage within an agent context, showcasing advanced functionalities for dynamic use cases. Developers migrating from frameworks like AutoGen or Semantic Kernel can use this as a reference to leverage similar capabilities within this framework.",
      "tags": [
        "agent",
        "intermediate",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_assistants_with_existing_assistant",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_existing_assistant.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_existing_assistant.py",
      "language": "python",
      "processed": true,
      "description": "This sample introduces developers to working with pre-existing assistants using the OpenAI API integrated within the Agent Framework. It demonstrates employing the framework's client to interact seamlessly with existing assistants by their IDs, leveraging tools and configurations for enhanced functionality. Developers transitioning from frameworks such as AutoGen, Semantic Kernel, or LangChain should reference this example to learn techniques for integrating their existing AI assistant capabilities into the Agent Framework environment.",
      "tags": [
        "agent",
        "openai_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_assistants_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the process of setting up and using OpenAI assistants with explicit configuration settings through the Agent Framework. It highlights the integration of custom tools and explicit API key and model configuration to create functional conversational AI agents. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain should consult this example to understand configuration practices specific to the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "openai_assistants_with_file_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the implementation of an OpenAI-powered assistant that integrates a hosted file search tool for efficient document-based question answering and information retrieval using the Agent Framework. It covers concepts such as creating vector stores, utilizing hosted file search, and processing user queries interactively. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this example to learn about integrated tool usage and interactive assistant design utilizing OpenAI's capabilities.",
      "tags": [
        "agent",
        "autogen_migration",
        "tools",
        "intermediate"
      ]
    },
    {
      "name": "openai_assistants_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample showcases the integration of function tools with an OpenAI-based ChatAgent within a conversational AI framework. It demonstrates specifying tools at agent instantiation and during query execution to extend functionality based on specific needs. Developers transitioning from frameworks like Semantic Kernel or LangChain can use this sample to understand an alternative method for dynamically enhancing agent capabilities.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_assistants_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_assistants_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the Agent Framework for managing conversation threads with OpenAI Assistants. It includes examples of automatic thread creation, thread persistence, and using specific thread identifiers for existing conversations. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this sample to understand effective thread management patterns for persistent and stateful interactions.",
      "tags": [
        "agent",
        "chat",
        "langchain_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "openai_chat_client_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the basic usage of the OpenAIChatClient from the Agent Framework to perform chat-based interactions in a Python application. It showcases the implementation of agents capable of streaming and non-streaming responses, integrating external tools to enhance functionality. Developers migrating from platforms like AutoGen or LangChain can leverage this example to understand the lightweight integration and usage of an agent model to facilitate dynamic conversations.",
      "tags": [
        "agent",
        "chat_client",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_chat_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the OpenAIChatClient from the Agent Framework with explicit settings configuration, bypassing the reliance on environment default values. It showcases defining a tool for weather querying and integrating it within an agent for executing contextual queries. Developers transitioning from frameworks such as AutoGen, Semantic Kernel, or LangChain can learn to establish and customize OpenAI-based agents effectively.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "openai_chat_client_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample illustrates the utilization of function tools integrated into the OpenAI Chat Client through the Agent Framework. It demonstrates three configurations: agent-level tools, query-level tools, and a hybrid approach with both. Developers migrating from Semantic Kernel, AutoGen, or LangChain can use this sample to understand tool configuration patterns in the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_chat_client_with_local_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the integration of the OpenAI Chat Client with the Microsoft Agent Framework, showcasing the usage of Model Context Protocol (MCP) tools for enhanced capabilities. It provides two approaches for defining and using MCP tools: at the run level and at the agent creation level. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can refer to this example to understand how to integrate external tools for augmenting agent functionalities, streamline workflows, and support advanced operational patterns.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "workflow"
      ]
    },
    {
      "name": "openai_chat_client_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to manage conversation threads using OpenAI's Chat Client within the Agent Framework. It illustrates various approaches, including automatic thread creation, persistent thread management for maintaining context, and utilizing existing thread message histories. Developers transitioning from other frameworks such as AutoGen or LangChain can leverage this example to understand context handling and multi-turn dialogues in the Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_chat_client_with_web_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_web_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_chat_client_with_web_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of HostedWebSearchTool with OpenAI ChatClient within the Agent Framework. It showcases real-time information retrieval and dynamic data usage in AI conversations, enabling developers to enhance interaction and provide accurate responses using external data sources. This sample is particularly useful for developers transitioning from frameworks like Semantic Kernel or LangChain, looking for implementations of external data integrations with conversational agents.",
      "tags": [
        "agent",
        "tools",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_responses_client_basic",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_basic.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample showcases the fundamental usage of the Agent Framework's OpenAIResponsesClient for generating structured responses, illustrating both streaming and non-streaming approaches to interaction handling. It demonstrates the implementation of basic agent functionalities, including executing specified tools and providing custom operational instructions. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain will find this example useful for understanding how to leverage the Agent Framework for conversational AI applications.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "openai_responses_client_image_analysis",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_image_analysis.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_image_analysis.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates utilizing the OpenAI Responses Client within the Agent Framework to perform image analysis using multimodal inputs. It illustrates how to set up an agent capable of handling texts and images and processing them to generate insightful outputs. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can use this sample to understand incorporating image analysis and multimodal functionality within the Agent Framework.",
      "tags": [
        "agent",
        "multimodal",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_image_generation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_image_generation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_image_generation.py",
      "language": "python",
      "processed": true,
      "description": "This example demonstrates how to use the OpenAI Responses Client within the Agent Framework to generate images using OpenAI's DALL-E models. The code provides an implementation to configure the agent with specific image parameters and process the resultant image data through parsing and displaying relevant metadata. Developers transitioning from frameworks such as LangChain or Semantic Kernel can reference this sample to understand best practices in using Agent Framework for multimodal AI operations.",
      "tags": [
        "agent",
        "multimodal",
        "beginner",
        "langchain_migration"
      ]
    },
    {
      "name": "openai_responses_client_reasoning",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_reasoning.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_reasoning.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the implementation and usage of an advanced reasoning agent using the OpenAIResponsesClient from the Agent Framework. It showcases how to leverage specific API options like 'additional_chat_options' for detailed reasoning and step-by-step analytical visualization, beneficial for educational and complex problem-solving tasks. Developers migrating from frameworks such as Semantic Kernel or LangChain should reference this sample to understand handling advanced reasoning tasks with OpenAI's GPT models.",
      "tags": [
        "agent",
        "advanced",
        "autogen_migration",
        "reasoning"
      ]
    },
    {
      "name": "openai_responses_client_with_code_interpreter",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_code_interpreter.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_code_interpreter.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the utilization of the OpenAIResponsesClient and HostedCodeInterpreterTool within the Agent Framework to process user queries by generating and executing Python code for computational tasks like factorial computation. It showcases the flexibility and integration capabilities of tools and agents in building intelligent systems. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this to understand tool integration workflows and custom response handling.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_responses_client_with_code_interpreter_files",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_code_interpreter_files.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_code_interpreter_files.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the Agent Framework with OpenAI's Responses Client and Hosted Code Interpreter Tool for Python data analysis. It covers key concepts like file handling with OpenAI services and embedding code execution tools within agents for dynamic queries and operations. Professionals migrating from frameworks like AutoGen or LangChain will find this example valuable for understanding integrated workflows and leveraging OpenAI's capabilities effectively.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "openai_responses_client_with_explicit_settings",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_explicit_settings.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_explicit_settings.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the usage of the OpenAIResponsesClient from the Agent Framework, demonstrating explicit configuration for initializing agents. Developers migrating from frameworks like AutoGen or Semantic Kernel will benefit from observing how to construct agents without relying on environment variable defaults and implement context-specific actions.",
      "tags": [
        "agent",
        "advanced",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_responses_client_with_file_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_file_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_file_search.py",
      "language": "python",
      "processed": true,
      "description": "This Python example demonstrates creating and utilizing a vector store with document-based question-answering capabilities using the Agent Framework and OpenAI integrations. The code focuses on performing file search tasks with HostedFileSearchTool and generating responses via OpenAIResponsesClient. Developers migrating from frameworks like Autogen, Semantic Kernel, or LangChain for advanced document-based querying should appreciate the similar tools and concepts presented here.",
      "tags": [
        "agent",
        "advanced",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "openai_responses_client_with_function_tools",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_function_tools.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_function_tools.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the integration of function tools with the OpenAI Responses Client within the Agent Framework to demonstrate dynamic capabilities at both agent creation and query execution levels. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will benefit by understanding how to implement and utilize function tools in the context of chat agents for enriched interaction scenarios.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "openai_responses_client_with_hosted_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_hosted_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_hosted_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to integrate hosted Model Context Protocol (MCP) tools with the OpenAI Responses Client provided by the Agent Framework. It showcases key functionalities such as user approval workflows for function calls, handling approvals with and without agent threads, and utilizing streaming interactions. Developers migrating from frameworks like Semantic Kernel or LangChain can use this example to understand how hosted tooling can be leveraged to enhance agent capabilities in their projects.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "human_in_loop"
      ]
    },
    {
      "name": "openai_responses_client_with_local_mcp",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_local_mcp.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_local_mcp.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of OpenAI Responses Client with tools adhering to the Model Context Protocol (MCP) within the Agent Framework, showcasing direct response generation with external capabilities. Key concepts include agent tool configuration, support for streamed and non-streamed interactions, and practical applications for documentation assistance. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain should refer to this sample to understand how to configure tools and streamline interactions within the Agent Framework.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_structured_output",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_structured_output.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_structured_output.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of structured output handling using the OpenAI Responses Client within the Agent Framework. It explores two key methods: processing non-streaming and streaming agent responses, highlighting how to utilize Pydantic models for data validation and type-safe operations. Developers transitioning from frameworks such as AutoGen, Semantic Kernel, or LangChain can leverage this sample to understand structured agent interactions and integrate Pydantic validation for enhanced data management.",
      "tags": [
        "agent",
        "autogen_migration",
        "structured_output",
        "intermediate"
      ]
    },
    {
      "name": "openai_responses_client_with_thread",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_thread.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_thread.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the management of conversational threads using the OpenAI Responses Client within the Agent Framework. It showcases various approaches, including automatic thread creation, in-memory thread persistence, and utilizing existing thread IDs for maintaining context across interactions. Developers migrating from frameworks like Semantic Kernel or LangChain can use this sample as a reference for implementing context-aware communication in their applications.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "openai_responses_client_with_web_search",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_web_search.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\openai_responses_client_with_web_search.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the integration of web search capabilities with the OpenAIResponsesClient using the Agent Framework. By employing the HostedWebSearchTool, the code showcases real-time information retrieval for enhancing the responses generated by the OpenAI client. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain will find this example valuable for understanding how to utilize external tools within agent-based systems and enable dynamic data-driven conversations.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "mem0_basic",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\mem0\\mem0_basic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\mem0\\mem0_basic.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the usage of the Mem0 context provider within the Agent Framework, showcasing its capabilities for handling memory context in agent interactions. It illustrates the setup and authentication processes for utilizing Mem0 with a dynamically generated user context, and provides practical examples of preserving and utilizing context across threads during agent queries, including contextual memory recall. Developers migrating from frameworks like LangChain or AutoGen can leverage this guide to understand how to implement memory-driven conversational agents.",
      "tags": [
        "agent",
        "memory",
        "beginner",
        "langchain_migration"
      ]
    },
    {
      "name": "mem0_oss",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\mem0\\mem0_oss.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\mem0\\mem0_oss.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to utilize the Mem0 OSS context provider with the Agent Framework to manage and utilize user context persistently across multiple interactions. It highlights the integration of memory components, setting user-specific context, and reusing data across conversation threads without requiring reinitialization. Developers migrating from frameworks such as Semantic Kernel or LangChain can use this as a guide to understand context persistence and memory handling within the Agent Framework.",
      "tags": [
        "agent",
        "context_management",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "mem0_threads",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\mem0\\mem0_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\mem0\\mem0_threads.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the usage of context providers using the Mem0 module within the Azure Agent Framework. It explores concepts such as global thread scope, per-operation thread scope, and managing multiple agents with distinct configurations to support advanced memory architectures. Developers seeking to migrate their solutions from frameworks like Semantic Kernel, AutoGen, or LangChain should reference this sample to understand context management and memory isolation patterns.",
      "tags": [
        "agent",
        "context_management",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "redis_basics",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\redis\\redis_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\redis\\redis_basics.py",
      "language": "python",
      "processed": true,
      "description": "This sample focuses on integrating Redis as a conversational memory context provider in the Agent Framework. It demonstrates key functionalities including standalone provider usage, combining the provider with an agent, and leveraging tool memory within conversation flows. Developers seeking to migrate from frameworks such as AutoGen or Semantic Kernel can utilize this sample to understand how to manage conversation state and retrieve context effectively.",
      "tags": [
        "context_providers",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "redis_conversation",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\redis\\redis_conversation.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\redis\\redis_conversation.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the usage of the Redis Context Provider integrated with the Agent Framework to manage conversational memory. It showcases the persistence of user preferences and conversation context using Redis as a backend, as well as integration with OpenAI GPT models for chat responses. Developers migrating from other frameworks like Semantic Kernel, AutoGen, or LangChain can reference this sample to learn effective techniques for using Redis as a robust context store in their conversational agent systems.",
      "tags": [
        "agent",
        "redis",
        "autogen_migration",
        "chat"
      ]
    },
    {
      "name": "redis_threads",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\redis\\redis_threads.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\redis\\redis_threads.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of Redis-based context providers integrated with conversational agents using the Agent Framework. It covers scenarios such as global thread scope, operation-specific thread memory, and agent-memory isolation, showcasing advanced interaction memory handling techniques. Developers migrating from context management systems like Semantic Kernel or LangChain can utilize this sample to understand best practices for memory scoping in conversational systems.",
      "tags": [
        "context_providers",
        "agent",
        "redis",
        "advanced"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\fanout_workflow\\workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\fanout_workflow\\workflow.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample illustrates the implementation of a comprehensive data processing workflow employing the Agent Framework. It elaborates on key elements such as data ingestion, validation, transformation, quality assurance, aggregation, and finalization within a fan-in/fan-out architecture. Migrating developers from platforms such as Semantic Kernel, AutoGen, or LangChain will benefit from understanding this approach for creating complex workflows with built-in processing and validation.",
      "tags": [
        "agent",
        "fan_out",
        "autogen_migration",
        "workflow"
      ]
    },
    {
      "name": "agent",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\foundry_agent\\agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\foundry_agent\\agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample provides an implementation of a weather assistant using the Agent Framework integrated with Azure AI services and a Debug UI. It demonstrates the process of configuring and deploying a conversational agent that utilizes external tools for fetching and processing weather-related data. Developers migrating from AutoGen, Semantic Kernel, or LangChain will benefit from this example by learning about creating interactive AI agents equipped with specific functionalities in a structured framework.",
      "tags": [
        "agent",
        "devui",
        "autogen_migration",
        "tools"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\spam_workflow\\workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\spam_workflow\\workflow.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates a comprehensive workflow using the Agent Framework within a Developer User Interface (DevUI) project. It includes multiple sequential and conditional processing stages for analyzing and handling email messages, showcasing structured outputs and complex workflow design. Developers migrating from frameworks like Semantic Kernel and LangChain can refer to this example to understand implementing sophisticated email processing pipelines using Agent Framework.",
      "tags": [
        "workflow",
        "beginner",
        "structured_output",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "agent",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\weather_agent_azure\\agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\weather_agent_azure\\agent.py",
      "language": "python",
      "processed": true,
      "description": "This sample showcases the implementation of a weather agent utilizing the Agent Framework Debug UI with a focus on integrating chat middleware and function middleware. It includes examples of sensitive information filtering, location-specific response customization, and how to describe and invoke tools for weather information retrieval. Developers migrating from frameworks like LangChain or Semantic Kernel can reference this sample to understand middleware usage and setup within an agent-centric model.",
      "tags": [
        "agent",
        "middleware",
        "langchain_migration",
        "tools"
      ]
    },
    {
      "name": "workflow",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\workflow_agents\\workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\workflow_agents\\workflow.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the creation of a multi-stage workflow using agents in the Agent Framework. The example showcases the application of conditional routing in the workflow based on structured outputs, enabling quality-based branching paths for content review and publishing operations. This sample is particularly relevant for developers transitioning from declarative orchestration frameworks like LangChain or Semantic Kernel, and seeking to understand procedure-driven workflow design.",
      "tags": [
        "agent",
        "workflow",
        "langchain_migration",
        "structured_output"
      ]
    },
    {
      "name": "red_team_agent_sample",
      "category": "evaluation",
      "file_path": "python\\samples\\getting_started\\evaluation\\azure_ai_foundry\\red_team_agent_sample.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\evaluation\\azure_ai_foundry\\red_team_agent_sample.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a Red Team evaluation for an AI agent developed using the Agent Framework and Azure AI's tools for adversarial testing. The program showcases the setup and execution of safety and resilience assessments against various risk categories using custom attack strategies on a financial advisory agent. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can refer to this sample for insights into integrating advanced evaluation mechanisms in their deployed agent systems.",
      "tags": [
        "evaluation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_ai_agents_streaming",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\azure_ai_agents_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\azure_ai_agents_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample showcases advanced workflow capabilities using the Agent Framework, specifically demonstrating the integration of two Azure-based AI agents\u2014Writer and Reviewer\u2014into a WorkflowBuilder pipeline with streaming functionality. Developers can observe incremental updates and learn how to implement a dynamic interaction between agents in a structured and adaptive workflow. Useful for migrating from frameworks like AutoGen or Semantic Kernel to harness streaming and agent coordination features.",
      "tags": [
        "workflow",
        "agent",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_agents_function_bridge",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_function_bridge.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_function_bridge.py",
      "language": "python",
      "processed": true,
      "description": "The provided Python sample demonstrates designing a chatbot workflow using the Agent Framework and Azure's OpenAI Chat services. It connects agents via an executor function to process and refine responses. Developers migrating from Semantic Kernel, AutoGen, or LangChain can leverage this sample for understanding workflow orchestration and inter-agent communication patterns.",
      "tags": [
        "agent",
        "workflow",
        "azure_client_migration",
        "streaming"
      ]
    },
    {
      "name": "azure_chat_agents_streaming",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the integration of Azure OpenAI Chat agents into a workflow built using the Agent Framework's WorkflowBuilder interface, demonstrating real-time streaming updates of agent-generated outputs for enhanced observability. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can utilize this sample to understand pipeline creation, streaming runs, and effective use of chat agents for automated content generation and review.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "azure_chat_agents_tool_calls_with_feedback",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_tool_calls_with_feedback.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\azure_chat_agents_tool_calls_with_feedback.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates an advanced workflow using the Agent Framework with Azure OpenAI services. It showcases how to develop an agent-based pipeline integrating tool calls, feedback coordination, and human-in-the-loop processes to create polished content drafts. Developers migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain will benefit from learning how to implement complex workflows leveraging Azure-specific capabilities.",
      "tags": [
        "workflow",
        "agent",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "concurrent_workflow_as_agent",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\concurrent_workflow_as_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\concurrent_workflow_as_agent.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample illustrates the implementation of a concurrent workflow utilizing the Agent Framework's `ConcurrentBuilder` and Azure OpenAI services. A fan-out/fan-in pattern is employed, where multiple agents provide expert insights on product development, marketing, and legal aspects based on an input prompt. Designers and developers transitioning from frameworks such as Semantic Kernel or LangChain can utilize this sample as a practical demonstration of workflow orchestration and reusable agent patterns.",
      "tags": [
        "workflow",
        "agent",
        "fan_out",
        "structured_output"
      ]
    },
    {
      "name": "custom_agent_executors",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\custom_agent_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\custom_agent_executors.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of custom agent executors within a workflow using the Agent Framework. It elaborates on utilizing the AzureOpenAIChatClient-backed agents for creating domain-specific tasks, such as content writing and reviewing, integrating handlers for typed input-output handling, and building workflows using the WorkflowBuilder for sequential execution of tasks. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this example to leverage advanced workflow orchestration and agent-based task delegation within the Microsoft ecosystem.",
      "tags": [
        "agent",
        "workflow",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "group_chat_workflow_as_agent",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\group_chat_workflow_as_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\group_chat_workflow_as_agent.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates utilizing the Agent Framework for implementing a group chat workflow involving orchestrated collaboration among specialized agents. It includes key concepts such as creating agents for distinct roles and integrating them into a structured orchestration pipeline facilitated by a manager using the GroupChatBuilder class. Developers transitioning from frameworks like LangChain or AutoGen will find this example beneficial for understanding how to manage multi-agent communication in complex tasks.",
      "tags": [
        "workflow",
        "agent",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "magentic_workflow_as_agent",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\magentic_workflow_as_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\magentic_workflow_as_agent.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates configuring and utilizing a Magentic workflow within the Agent Framework. It integrates an agent-based approach to orchestrating tasks, highlighting the usage of multiple agents, streaming event callbacks, and workflow completion handling. Developers migrating from frameworks such as Semantic Kernel and LangChain can leverage this example to understand how to wrap workflows as agents for enhanced interoperability.",
      "tags": [
        "workflow",
        "agent",
        "streaming",
        "magentic_migration"
      ]
    },
    {
      "name": "sequential_workflow_as_agent",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\sequential_workflow_as_agent.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\sequential_workflow_as_agent.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the implementation of a sequential workflow processing system in Python using the Agent Framework. It showcases the creation of agents with specific roles (writer and reviewer), the construction of a sequential workflow using `SequentialBuilder`, and the encapsulation of this workflow as a reusable agent. This example is particularly useful for developers migrating from frameworks like Semantic Kernel, LangChain, or AutoGen to comprehend how to organize and manage tasks within an agent-based architecture.",
      "tags": [
        "agent",
        "workflow",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "workflow_as_agent_human_in_the_loop",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\workflow_as_agent_human_in_the_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\workflow_as_agent_human_in_the_loop.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of a Workflow Agent with Human-in-the-Loop capabilities using the Agent Framework. It showcases concepts such as WorkflowBuilder, Executor roles, and message handling within workflows. Developers migrating from frameworks like LangChain or AutoGen can utilize this example to learn how uncertainty in decision-making can be efficiently handled through escalation patterns and human intervention.",
      "tags": [
        "workflow",
        "agent",
        "human_in_loop",
        "langchain_migration"
      ]
    },
    {
      "name": "workflow_as_agent_reflection_pattern",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\agents\\workflow_as_agent_reflection_pattern.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\agents\\workflow_as_agent_reflection_pattern.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the use of the Agent Framework to create a Workflow Agent implementing the Reflection and Retry pattern. It showcases the integration of a cyclic workflow model using Worker and Reviewer Executors to iteratively enhance responses based on structured feedback. Developers migrating from frameworks such as AutoGen or Semantic Kernel can leverage this sample to understand advanced agent cooperation patterns in workflows.",
      "tags": [
        "agent",
        "workflow",
        "reflection",
        "advanced"
      ]
    },
    {
      "name": "checkpoint_with_human_in_the_loop",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\checkpoint\\checkpoint_with_human_in_the_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\checkpoint\\checkpoint_with_human_in_the_loop.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of a complex workflow utilizing the Agent Framework to generate product release notes and validate them through human-in-the-loop processes. It emphasizes checkpoint persistence, allowing workflows to pause and resume seamlessly with state restoration. Developers transitioning from frameworks such as AutoGen or Semantic Kernel can refer to this sample to understand integration strategies for human oversight and checkpoint functionalities.",
      "tags": [
        "workflow",
        "human_in_loop",
        "checkpoint",
        "autogen_migration"
      ]
    },
    {
      "name": "checkpoint_with_resume",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\checkpoint\\checkpoint_with_resume.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\checkpoint\\checkpoint_with_resume.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of a checkpointing system in workflows using the Agent Framework. It highlights key concepts such as executor-local and shared workflow state management, and effective use of the AzureOpenAIChatClient. Developers migrating from other frameworks like AutoGen or Semantic Kernel can refer to this example for insights into adopting checkpointing mechanisms within workflows.",
      "tags": [
        "workflow",
        "checkpoint",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "sub_workflow_checkpoint",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\checkpoint\\sub_workflow_checkpoint.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\checkpoint\\sub_workflow_checkpoint.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation and usage of sub-workflows in the Agent Framework, focusing on checkpointing mechanisms. It showcases a parent workflow invoking sub-workflows where checkpoints are utilized to capture the state of pending human approvals for continuation requests. Developers migrating from frameworks such as AutoGen or Semantic Kernel can use this as a reference for effectively handling workflows requiring human intervention and continuity.",
      "tags": [
        "workflow",
        "human_in_loop",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "sub_workflow_basics",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\composition\\sub_workflow_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\composition\\sub_workflow_basics.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of sub-workflows using the Agent Framework. It outlines the orchestration of text processing tasks where each sub-workflow processes individual text inputs by analyzing word and character counts, and returns structured output back to the parent workflow. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain should reference this comprehensive guide when exploring techniques for modular workflow composition and asynchronous execution.",
      "tags": [
        "workflow",
        "agent",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "sub_workflow_parallel_requests",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\composition\\sub_workflow_parallel_requests.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\composition\\sub_workflow_parallel_requests.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates a workflow implementation using the Agent Framework, showcasing sub-workflow delegation and type-based request routing. It demonstrates advanced concepts such as specialized interceptors, automatic type filtering, resource allocation, and policy checking. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this sample to understand how to effectively utilize message handlers and adopt modular designs.",
      "tags": [
        "agent",
        "workflow",
        "advanced",
        "parallel"
      ]
    },
    {
      "name": "sub_workflow_request_interception",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\composition\\sub_workflow_request_interception.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\composition\\sub_workflow_request_interception.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates how to construct workflows utilizing sub-workflows in the Agent Framework, focusing on request interception and conditional handling. Key concepts include workflow execution through delegated sub-workflows, message handling via specialized request interceptors, and effective response correlation for concurrent processing. Developers transitioning from systems like Semantic Kernel or AutoGen can refer to this example to understand advanced workflow composition and request-response management.",
      "tags": [
        "workflow",
        "autogen_migration",
        "advanced",
        "structured_output"
      ]
    },
    {
      "name": "edge_condition",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\edge_condition.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\edge_condition.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates implementing conditional control flow in workflows using the Agent Framework. It introduces concepts such as edge conditions for routing based on structured data, using Pydantic for typed JSON responses, and creating modular, reusable workflow executors. This sample is particularly useful for developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain, who need to leverage structured outputs and complex decision logic in their workflows.",
      "tags": [
        "workflow",
        "intermediate",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "multi_selection_edge_group",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\multi_selection_edge_group.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\multi_selection_edge_group.py",
      "language": "python",
      "processed": true,
      "description": "This code sample showcases the implementation of a workflow utilizing multi-selection edge groups for routing tasks dynamically based on analysis results. It demonstrates the integration of shared state management, conditional task execution based on selection criteria, and merging outputs from parallel branches into a unified state using the Agent Framework. Developers migrating from frameworks like AutoGen or LangChain can benefit by understanding advanced control flow mechanisms and state sharing for structured data-driven workflows.",
      "tags": [
        "workflow",
        "advanced",
        "agent_framework",
        "fan_out"
      ]
    },
    {
      "name": "sequential_executors",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\sequential_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\sequential_executors.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to construct sequential workflows using the Agent Framework's `WorkflowBuilder` and `Executor` components. It showcases defining custom executors with `@handler` methods to process and pass data between workflow steps, as well as utilizing streaming functionality to observe real-time workflow events. Developers migrating from other frameworks like Semantic Kernel or LangChain can reference this sample to understand sequential processing and event-driven models in the Agent Framework.",
      "tags": [
        "workflow",
        "streaming",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "sequential_streaming",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\sequential_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\sequential_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the creation of a sequential workflow with streaming capabilities using the Agent Framework. It involves two processing steps: converting text to uppercase and reversing the transformed text, utilizing the @executor decorator, WorkflowBuilder, and related concepts. Developers migrating from frameworks such as AutoGen or LangChain, seeking efficient sequential data processing with streaming event observability, will find this example useful.",
      "tags": [
        "workflow",
        "streaming",
        "observability",
        "autogen_migration"
      ]
    },
    {
      "name": "simple_loop",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\simple_loop.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\simple_loop.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the implementation of a feedback loop within a workflow using the Agent Framework. It showcases the use of user-defined executors, agent integration, and dynamic interaction using an Azure OpenAI Chat Client to judge guesses in a binary search algorithm. Developers moving from frameworks like LangChain or Semantic Kernel can reference this example to understand how flexible workflows are constructed in the Agent Framework.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "feedback_loop"
      ]
    },
    {
      "name": "switch_case_edge_group",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\control-flow\\switch_case_edge_group.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\control-flow\\switch_case_edge_group.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement a switch-case edge group in workflows using the Agent Framework. It showcases deterministic routing based on structured outputs validated via Pydantic models and highlights techniques for managing state and routing within a workflow. Developers migrating from other frameworks, such as AutoGen, Semantic Kernel, or LangChain, will find this example beneficial for learning stateful workflows and structured decision-making processes.",
      "tags": [
        "workflows",
        "intermediate",
        "semantic_kernel_migration",
        "structured_output"
      ]
    },
    {
      "name": "guessing_game_with_human_input",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\human-in-the-loop\\guessing_game_with_human_input.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\human-in-the-loop\\guessing_game_with_human_input.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of a human-in-the-loop workflow using the Agent Framework. It showcases essential concepts such as managing interaction between an agent and a human, structured JSON parsing mechanisms, and application-led workflow control. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can use this example to understand how the Agent Framework enables seamless integration of human feedback into automated processes.",
      "tags": [
        "workflow",
        "human_in_loop",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "tracing_basics",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\observability\\tracing_basics.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\observability\\tracing_basics.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the observability capabilities of the Agent Framework through OpenTelemetry tracing. It introduces the concepts of listeners, executors, and message-passing workflows, showcasing how to build a minimal graph-based workflow, while monitoring events such as executor processing and message sending. Developers migrating from frameworks like Semantic Kernel or AutoGen can use this example as a foundation to integrate diagnostics and observability into their applications.",
      "tags": [
        "workflow",
        "observability",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "concurrent_agents",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\concurrent_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\concurrent_agents.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the use of the Agent Framework to construct and run a concurrent fan-out/fan-in workflow with multiple agents. It shows how the `ConcurrentBuilder` class can orchestrate communication between 'researcher', 'marketer', and 'legal' agents to aggregate results based on a shared input prompt. Developers migrating from frameworks such as AutoGen or LangChain may refer to this sample to effectively implement parallel workflows and aggregate structured outputs using a streamlined API.",
      "tags": [
        "workflow",
        "advanced",
        "autogen_migration",
        "parallel"
      ]
    },
    {
      "name": "concurrent_custom_agent_executors",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\concurrent_custom_agent_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\concurrent_custom_agent_executors.py",
      "language": "python",
      "processed": true,
      "description": "This code sample demonstrates the implementation of a concurrent fan-out/fan-in workflow with individual agent executors using the Agent Framework. Developers are introduced to concepts including ChatAgent creation, customized handlers, and the ConcurrentBuilder API for orchestrating workflows. Those migrating from frameworks such as semantic_kernel, autogen, or langchain will find this example beneficial for learning advanced workflow design patterns.",
      "tags": [
        "workflow",
        "advanced",
        "parallel",
        "langchain_migration"
      ]
    },
    {
      "name": "concurrent_custom_aggregator",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\concurrent_custom_aggregator.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\concurrent_custom_aggregator.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates how to implement a concurrent workflow using the Agent Framework's ConcurrentBuilder and custom aggregation mechanisms. It covers key concepts such as fan-out, custom aggregation with LLM support, and the utilization of domain-specific agents within a workflow. Developers migrating from other frameworks like AutoGen, Semantic Kernel, or LangChain can reference this guide to learn about advanced orchestration techniques involving parallel processing and customized post-processing.",
      "tags": [
        "workflow",
        "fan_out",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "group_chat_prompt_based_manager",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\group_chat_prompt_based_manager.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\group_chat_prompt_based_manager.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of a workflow for managing a group chat using a language-model manager and two agent participants. Utilizing the `Agent Framework` and accessing OpenAI services, it showcases concepts such as prompt-based orchestration, task decomposition, and streaming results. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this sample to understand collaborative agent workflows.",
      "tags": [
        "workflow",
        "agent",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "group_chat_simple_selector",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\group_chat_simple_selector.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\group_chat_simple_selector.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates a basic Group Chat workflow using the Agent Framework's orchestration capabilities to select participants in a conversation. The sample showcases integration with OpenAI's chat model for constructing agents with specific roles and customizing the speaker selection algorithm using a simple round-robin strategy. Developers migrating from frameworks such as AutoGen can reference this example to understand implementing collaborative workflows with orchestrated speaker selection and leveraging OpenAI's chat functionalities.",
      "tags": [
        "workflow",
        "autogen_migration",
        "chat",
        "beginner"
      ]
    },
    {
      "name": "handoff_simple",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\handoff_simple.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\handoff_simple.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of a simple workflow utilizing a single-tier handoff between triage and specialist agents. It highlights key concepts of the Agent Framework, including auto-registered handoff tools and single-tier routing for straightforward support scenarios. Ideal for developers transitioning from frameworks such as AutoGen, Semantic Kernel, or LangChain, it showcases foundational practices for orchestrating multi-agent communication within complex workflows.",
      "tags": [
        "workflow",
        "agent",
        "autogen_migration",
        "human_in_loop"
      ]
    },
    {
      "name": "handoff_specialist_to_specialist",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\handoff_specialist_to_specialist.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\handoff_specialist_to_specialist.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement complex multi-tier workflows in customer support scenarios using the Agent Framework, showcasing specialist-to-specialist handoff capabilities within a structured routing pattern. It covers topics like agent creation, workflow event handling, and Azure-based client setup. Developers transitioning from frameworks like AutoGen or Semantic Kernel may find the implementation details beneficial, particularly for creating extensible and collaborative support systems.",
      "tags": [
        "agent",
        "workflow",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "magentic",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\magentic.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\magentic.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample demonstrates the implementation of a multi-agent workflow using the Agent Framework, specifically utilizing the Magentic orchestration tool. It showcases concepts including agent collaboration, real-time event streaming, and workflow management to tackle a complex task about energy efficiency analysis. Developers migrating from other frameworks, such as AutoGen, Semantic Kernel, or LangChain, will find this example useful for understanding Agent Framework's capabilities and how to implement advanced orchestration scenarios.",
      "tags": [
        "workflow",
        "streaming",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "magentic_checkpoint",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\magentic_checkpoint.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\magentic_checkpoint.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample illustrates the implementation of workflow orchestration using magnetic checkpointing functionality in the Agent Framework. It demonstrates how to utilize checkpoints for pausing and resuming workflows, particularly for handling human plan reviews with injected responses. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain would find this sample insightful for understanding how to enable workflow persistence and human-in-the-loop processing.",
      "tags": [
        "workflow",
        "agent",
        "checkpoint",
        "autogen_migration"
      ]
    },
    {
      "name": "magentic_human_plan_update",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\magentic_human_plan_update.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\magentic_human_plan_update.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates a workflow orchestration with the Agent Framework using the 'Magentic' pattern. It illustrates the creation of a collaborative workflow between agents for research and code execution, including provisions for human intervention to review generated plans before execution. Developers migrating from frameworks such as Semantic Kernel or LangChain can reference this sample for insights into leveraging human-in-the-loop methodologies in complex workflows.",
      "tags": [
        "workflow",
        "agent",
        "human_in_loop",
        "autogen_migration"
      ]
    },
    {
      "name": "sequential_agents",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\sequential_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\sequential_agents.py",
      "language": "python",
      "processed": true,
      "description": "This sample illustrates the implementation of a sequential workflow using the Agent Framework's SequentialBuilder. It involves constructing a conversation between two agents with shared context and demonstrates sequential orchestration with input normalization and response conversion. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can use this example to understand seamless agent collaboration and context sharing.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "sequential_custom_executors",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\orchestration\\sequential_custom_executors.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\orchestration\\sequential_custom_executors.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample demonstrates the implementation of a sequential workflow that integrates agents and custom executors using the Agent Framework. It showcases the chaining of participants like a content-generating agent and a summarizer executor within a shared conversation context, highlighting the workflow design patterns. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain will find this example beneficial to understand the creation and management of structured workflows in the Agent Framework.",
      "tags": [
        "workflow",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "aggregate_results_of_different_types",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\parallelism\\aggregate_results_of_different_types.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\parallelism\\aggregate_results_of_different_types.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the construction and utilization of workflows employing a parallel branch pattern using the Agent Framework. It illustrates key concepts such as fan-out and fan-in operations, creation of executors, and handling of diverse output data types. Developers migrating from frameworks like LangChain, SemanticKernel, or AutoGen will find this guide beneficial in understanding structured workflows for efficient data processing.",
      "tags": [
        "agent",
        "workflow",
        "parallel",
        "langchain_migration"
      ]
    },
    {
      "name": "fan_out_fan_in_edges",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\parallelism\\fan_out_fan_in_edges.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\parallelism\\fan_out_fan_in_edges.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to implement parallel processing and aggregations in workflows using the Agent Framework. It showcases the 'fan-out, fan-in' pattern where a dispatcher distributes input to multiple agents operating concurrently, and an aggregator collects their results into a unified output. Developers migrating from frameworks like AutoGen or Semantic Kernel will find this example valuable for structuring efficient and scalable workflow executions.",
      "tags": [
        "workflow",
        "parallel",
        "fan_out",
        "autogen_migration"
      ]
    },
    {
      "name": "map_reduce_and_visualization",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\parallelism\\map_reduce_and_visualization.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\parallelism\\map_reduce_and_visualization.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates a map-reduce workflow for word count in a large text data using the Agent Framework. It covers key concepts such as workflow orchestration, executor definition, and parallel task execution with shared state management. Developers migrating from frameworks including AutoGen and LangChain can use this sample to understand parallelism, structured data communication, and visualization techniques.",
      "tags": [
        "workflow",
        "parallel",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "shared_states_with_agents",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\state-management\\shared_states_with_agents.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\state-management\\shared_states_with_agents.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the implementation of workflows with shared state management using the Agent Framework. It showcases structured agent outputs through Pydantic models, conditional routing based on intermediate typed results, and efficient communication via lightweight references. Developers migrating from frameworks like LangChain or Semantic Kernel will benefit from understanding the robust state handling and structured behavior demonstrated here for similar automation scenarios.",
      "tags": [
        "agent",
        "workflow",
        "intermediate",
        "state_management"
      ]
    },
    {
      "name": "concurrent_with_visualization",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\visualization\\concurrent_with_visualization.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\visualization\\concurrent_with_visualization.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates the construction and execution of a concurrent workflow utilizing fan-out and fan-in mechanisms via Microsoft Agent Framework. It showcases structured orchestration with multiple agents representing different domains (research, marketing, legal), and utilizes the `WorkflowViz` module to visualize the workflow as Mermaid or GraphViz diagrams. Developers migrating from frameworks such as LangChain or Semantic Kernel can use this example to understand modern concurrent process execution in agent-based systems.",
      "tags": [
        "workflow",
        "intermediate",
        "langchain_migration",
        "fan_out"
      ]
    },
    {
      "name": "step1_executors_and_edges",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\_start-here\\step1_executors_and_edges.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\_start-here\\step1_executors_and_edges.py",
      "language": "python",
      "processed": true,
      "description": "This Python sample introduces key concepts of creating workflows using the Agent Framework, illustrating the use of Executors and edges for connecting nodes. It demonstrates the usage of Executor subclasses and function-based executors to define workflow nodes and how to construct workflows with directed edges using the WorkflowBuilder API. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can refer to this example to understand foundational constructs for building scalable and flexible workflow systems.",
      "tags": [
        "workflow",
        "intermediate",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "step2_agents_in_a_workflow",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\_start-here\\step2_agents_in_a_workflow.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\_start-here\\step2_agents_in_a_workflow.py",
      "language": "python",
      "processed": true,
      "description": "This Python code sample illustrates the creation and execution of a sequential workflow that integrates agents with distinct tasks: writing and reviewing content. By leveraging the Agent Framework and Azure OpenAI services, the sample provides insights into constructing automated workflows with scalable and modular agent components. Developers migrating from frameworks such as Semantic Kernel or LangChain can refer to this sample to learn how to implement structured processing tasks using the Agent Framework.",
      "tags": [
        "workflow",
        "agent",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "step3_streaming",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\_start-here\\step3_streaming.py",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\_start-here\\step3_streaming.py",
      "language": "python",
      "processed": true,
      "description": "This sample demonstrates how to use the Agent Framework for creating a workflow that involves multiple agents interacting through a streaming execution. It utilizes the Azure OpenAI Chat Client to create content generation and reviewing entities, showcasing concepts like workflow building, event handling, and streaming systems. This example is particularly beneficial for developers transitioning from frameworks like AutoGen or LangChain, as it provides insights into structuring multi-agent workflows with enhanced event observability.",
      "tags": [
        "workflow",
        "agent",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README provides an overview of the Agent Framework and showcases multiple implementation examples involving diverse providers such as OpenAI, Azure OpenAI, and Anthropic, among others. It covers essential concepts including function tools, code interpretation, structured outputs, web search, MCP integration, and agent creation both with predefined APIs and custom frameworks, which are beneficial for developers planning to migrate from frameworks like AutoGen, Semantic Kernel, or LangChain.",
      "tags": [
        "documentation",
        "agent",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "chat_client_documentation",
      "category": "chat_client",
      "file_path": "python\\samples\\getting_started\\chat_client\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\chat_client\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides examples and guidance for direct usage of various chat clients within the Agent Framework, focusing on interaction with public APIs like Azure OpenAI and OpenAI services. It details environment configuration and functionality for different clients, showcasing their specific implementations and utilities. Developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain will find relevant instructions for configuring and using these modules effectively.",
      "tags": [
        "guide",
        "chat_client",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "devui_documentation",
      "category": "devui",
      "file_path": "python\\samples\\getting_started\\devui\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\devui\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation details the functionality and setup process for the Developer User Interface (DevUI) component of the Agent Framework. It covers interactive agent testing, implementing workflows, and integrating sample agents into the framework. Ideal for developers migrating from other frameworks seeking to understand interactive debugging and testing tools within the Agent Framework ecosystem.",
      "tags": [
        "documentation",
        "agent",
        "devui",
        "tools"
      ]
    },
    {
      "name": "mcp_documentation",
      "category": "mcp",
      "file_path": "python\\samples\\getting_started\\mcp\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\mcp\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides guidance on utilizing the Model Context Protocol (MCP) within the Agent Framework, showcasing its integration into AI applications. It includes examples for creating MCP servers and implementing secure API key authentication, making it crucial for developers migrating from other frameworks seeking interoperability and advanced connectivity features.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "middleware_documentation",
      "category": "middleware",
      "file_path": "python\\samples\\getting_started\\middleware\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\middleware\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive guide on middleware functionalities within the Agent Framework. It includes various implementation examples for function, class, and decorator-based middleware, as well as advanced topics such as execution control, result overriding, and state management. Developers migrating from other frameworks like Semantic Kernel or LangChain will find valuable insights into middleware customization to enhance agent workflows.",
      "tags": [
        "middleware",
        "documentation",
        "advanced",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "multimodal_input_documentation",
      "category": "multimodal_input",
      "file_path": "python\\samples\\getting_started\\multimodal_input\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\multimodal_input\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This guide explores the use of multimodal input capabilities in the Agent Framework for integrating various data formats like images, audio, and PDFs into AI applications. It provides examples for OpenAI and Azure OpenAI APIs showcasing client implementation and configuration. This is particularly helpful for developers transitioning from frameworks like LangChain and AutoGen, seeking enhanced multimodal support.",
      "tags": [
        "documentation",
        "agent",
        "multimodal",
        "autogen_migration"
      ]
    },
    {
      "name": "observability_documentation",
      "category": "observability",
      "file_path": "python\\samples\\getting_started\\observability\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\observability\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README provides a comprehensive guide on configuring and integrating observability in Python applications using the Agent Framework. It discusses sending telemetry data to various APM systems based on the OpenTelemetry standard, outlining the setup process for exporters, providers, and environment configurations. Developers migrating from frameworks like AutoGen or Semantic Kernel will find insights into enabling detailed monitoring and traceability for their applications.",
      "tags": [
        "documentation",
        "advanced",
        "observability",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "purview_agent_documentation",
      "category": "purview_agent",
      "file_path": "python\\samples\\getting_started\\purview_agent\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\purview_agent\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README provides a comprehensive overview of implementing Microsoft Purview policy enforcement within an Agent Framework using middleware techniques. The guide covers setup, authentication modes (interactive and certificate-based), and demonstrates middleware integration for regulating chat prompts and responses. Ideal for developers migrating from similar frameworks aiming to incorporate advanced policy enforcement capabilities into their implementations.",
      "tags": [
        "documentation",
        "middleware",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "threads_documentation",
      "category": "threads",
      "file_path": "python\\samples\\getting_started\\threads\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\threads\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides practical examples for thread management within the Agent Framework, illustrating key features such as implementing custom message stores, suspending/resuming conversations, and leveraging Redis-backed persistence strategies. It is well-suited for developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain, offering tangible guidance on maintaining conversation state across sessions.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "tools_documentation",
      "category": "tools",
      "file_path": "python\\samples\\getting_started\\tools\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\tools\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true
    },
    {
      "name": "workflows_documentation",
      "category": "workflows",
      "file_path": "python\\samples\\getting_started\\workflows\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\workflows\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an introduction to utilizing the workflows feature in the Agent Framework, presenting key concepts such as executors, edges, agents in workflows, and event streaming. It includes sample implementations for various scenarios such as sub-workflows, concurrent orchestration, human-in-the-loop processes, and observability in workflows. Developers migrating from frameworks like AutoGen or LangChain can leverage this guide to understand advanced features offered by the Agent Framework and streamline their transition.",
      "tags": [
        "workflows",
        "documentation",
        "agent",
        "advanced"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\a2a\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\a2a\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides practical examples for using the A2A (Agent-to-Agent) protocol within the Agent Framework. It explores agent discovery, connection setup, and communication via message exchanges, making it ideal for developers seeking guided examples for integrating remote agents. This resource is particularly useful for users migrating from frameworks like LangChain or Semantic Kernel who are interested in enhancing distributed agent interactions.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "langchain_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\anthropic\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\anthropic\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a tutorial on integrating Anthropic's Claude models within the Agent Framework, guiding developers in configuring OpenAI Chat Client for interaction with these models. It showcases capabilities like streaming and invoking tools for advanced conversational AI. This is particularly helpful for practitioners transitioning from other systems like AutoGen, LangChain, or Semantic Kernel to leverage the said functionalities.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "The 'Azure AI Agent Examples' documentation provides various examples for utilizing agents within the Azure AI framework, highlighting methods to configure, interact, and incorporate tools and external APIs. Key concepts include creating agents with explicit settings, working with threads and existing agents, and integrating diverse tools such as Bing Grounding search and Azure AI Search. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can explore these examples to ease their transition and adopt Azure AI Agent functionalities effectively.",
      "tags": [
        "documentation",
        "agent",
        "azure_ai",
        "advanced"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_openai\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_openai\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive overview of implementing agents with Azure OpenAI services within the Agent Framework. It explores various use cases, including assistant management, thread handling for state persistence, explicit model configuration, multimodal interactions, and using code interpreter tools. Developers considering migration from other frameworks like AutoGen or LangChain should reference this guide for practical implementation strategies.",
      "tags": [
        "documentation",
        "agent",
        "langchain_migration",
        "multimodal"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\copilotstudio\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\copilotstudio\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an in-depth exploration of creating and using agents within the Microsoft Copilot Studio framework using the Agent Framework. It covers fundamental configurations, authentication procedures, and usage patterns. Developers transitioning from frameworks like Semantic Kernel or LangChain will find this guide beneficial for understanding Copilot Studio's integration approach and its capabilities.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\custom\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\custom\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This README documentation provides a comprehensive overview of creating custom agents and chat clients within the Microsoft Agent Framework. It highlights extending base classes for personalized implementations, effective conversation management, and leveraging streaming responses. Developers transitioning from frameworks like Semantic Kernel or LangChain will find step-by-step guidance invaluable for migrating their solutions to this environment.",
      "tags": [
        "documentation",
        "agent",
        "chat_client",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\ollama\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\ollama\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides guidance on integrating Ollama models within the Agent Framework. It explains how to set up the environment, configure local Ollama models, and use them with the OpenAI Chat Client for streaming and tool-command functionalities. Ideal for developers migrating from frameworks like AutoGen or LangChain seeking to leverage local Ollama models.",
      "tags": [
        "documentation",
        "agent",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\openai\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\openai\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive overview of utilizing agents with the OpenAI Assistants Client via the `agent_framework.openai` package, encompassing various examples like initialization, management, and integration with tools and settings. It is ideal for developers enhancing applications built with frameworks such as LangChain or Semantic Kernel by exploring feature-rich capabilities like threading, multimodal support, and structured outputs.",
      "tags": [
        "documentation",
        "agent",
        "tools",
        "langchain_migration"
      ]
    },
    {
      "name": "agents_documentation",
      "category": "agents",
      "file_path": "python\\samples\\getting_started\\agents\\azure_ai\\notebooks\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\agents\\azure_ai\\notebooks\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides examples of using agents with the Azure AI chat client through Jupyter notebooks, showcasing capabilities such as lifecycle management, thread management, and advanced tool integration including Bing search and OpenAPI. It serves as a practical guide for developers transitioning from other AI frameworks like LangChain, AutoGen, or Semantic Kernel, offering tutorials for basic to advanced use cases. With detailed setup instructions and a structured learning path, it facilitates effective adoption and implementation of the Agent Framework.",
      "tags": [
        "documentation",
        "tutorial",
        "agent",
        "langchain_migration"
      ]
    },
    {
      "name": "context_providers_documentation",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\mem0\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\mem0\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces the Mem0 context provider, an integration with the Mem0 self-improving memory layer enabling persistent memory management for large language models within the Agent Framework. It covers various memory scoping strategies, configurations for both cloud-based and self-hosted setups, and examples of using Mem0 across different logical contexts. Developers transitioning from other frameworks like AutoGen and Semantic Kernel should consider this guide when implementing context-aware conversation functionalities.",
      "tags": [
        "context_management",
        "agent_framework",
        "migration_guide",
        "advanced_examples"
      ]
    },
    {
      "name": "context_providers_documentation",
      "category": "context_providers",
      "file_path": "python\\samples\\getting_started\\context_providers\\redis\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\context_providers\\redis\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive information on integrating Redis-based context providers within the Agent Framework. It covers features such as persistent memory and hybrid vector search capabilities for improved session handling and context retrieval. This guide is beneficial for developers migrating their applications to utilize Redis for context management from other frameworks like AutoGen or LangChain.",
      "tags": [
        "guide",
        "agent",
        "langchain_migration",
        "context_management"
      ]
    },
    {
      "name": "evaluation_documentation",
      "category": "evaluation",
      "file_path": "python\\samples\\getting_started\\evaluation\\azure_ai_foundry\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/python\\samples\\getting_started\\evaluation\\azure_ai_foundry\\README.md",
      "language": "python",
      "type": "documentation",
      "processed": true,
      "description": "This documentation showcases the use of Azure AI's evaluation and red teaming capabilities with Agent Framework agents, focusing on assessing the robustness and safety of agents under adversarial circumstances. Developers migrating from frameworks such as AutoGen or Semantic Kernel can reference this guide to implement security scenarios and evaluate agents' resilience using risk analysis tools.",
      "tags": [
        "evaluation",
        "agent",
        "advanced",
        "autogen_migration"
      ]
    }
  ],
  "dotnet": [
    {
      "name": "HostClientAgent",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AClient\\HostClientAgent.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AClient\\HostClientAgent.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the creation of an AI Agent using the Agent Framework in a .NET application, leveraging external tools integrated via remote agents. It demonstrates initialization procedures, exception handling, and tool utility configuration essential for dynamic AI Agent implementation. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can consult this sample to understand programming adapters to AI Agents using remote resources.",
      "tags": [
        "agent",
        "autogen_migration",
        "tools",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AClient\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AClient\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates an implementation of an A2A Client using Microsoft's Agent Framework in a .NET environment. It demonstrates setting up configuration management, logging, and integration with a HostClient to interact with an AI agent. Developers migrating from systems like Semantic Kernel or LangChain can reference this example for insights into implementing client-server interactions leveraging Microsoft Agent Framework.",
      "tags": [
        "agent",
        "chat_client",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "HostAgentFactory",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AServer\\HostAgentFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AServer\\HostAgentFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the construction and initialization of Host Agents tailored to interact with various agent types. It illustrates design patterns for agent customization and usage, offering methods for creating agents with specific configurations for tasks such as invoice processing, policy management, and logistics queries. Developers migrating from frameworks like Semantic Kernel or AutoGen can reference this sample to understand practical implementation patterns for structured agent instantiation and capability definition.",
      "tags": [
        "agent",
        "structured_output",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AServer\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AServer\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates how to set up an 'Agent-to-Agent' (A2A) server application using Microsoft's Agent Framework. It showcases the initialization and configuration of a host agent with various plugin tools, enabling dynamic query handling and functionality specialization. Developers transitioning from frameworks like Semantic Kernel or AutoGen can use this as a reference to understand agent creation, task mapping, and tool integration with the Agent Framework.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "tools",
        "intermediate"
      ]
    },
    {
      "name": "InvoiceQuery",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AServer\\Models\\InvoiceQuery.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AServer\\Models\\InvoiceQuery.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates an advanced querying capability for retrieving invoice data based on specified criteria such as company name and date range. It utilizes a structured data model featuring `Invoice` and `Product` classes, showcasing aggregation and filtering techniques within the context of a .NET application framework. This sample is particularly relevant for developers migrating from systems like AutoGen or Semantic Kernel where data-driven task automation is central.",
      "tags": [
        "data_modeling",
        "autogen_migration",
        "advanced",
        "structured_output"
      ]
    },
    {
      "name": "ActorFrameworkWebApplicationExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\ActorFrameworkWebApplicationExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\ActorFrameworkWebApplicationExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of web application extensions to facilitate agent discovery using actor-based frameworks. It covers critical concepts such as defining endpoint routes, asynchronous agent catalog queries, and conditional serialization of JSON responses. Developers migrating from frameworks such as Semantic Kernel or AutoGen can reference this sample to better grasp structure and functionality approaches key to integrating web-based agent frameworks.",
      "tags": [
        "agent",
        "middleware",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the use of Agent Framework for building a web-based chat application with multi-agent workflows and their respective configurations. It illustrates the creation of sequential and concurrent workflows with agents specialized in different domains, showcasing the power and flexibility of the framework. Developers migrating from other agent frameworks such as Semantic Kernel, AutoGen, or LangChain should reference this to understand workflows composition and agent integration strategies.",
      "tags": [
        "agent",
        "workflow",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "ModelExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AppHost\\ModelExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AppHost\\ModelExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample introduces extension methods for the Agent Web Chat's application builders, enabling seamless integration and operation with various AI models such as OpenAI and Azure AI. It covers practical implementation strategies for configuring and managing resources and execution contexts within a distributed application framework. Developers transitioning from frameworks like AutoGen or Semantic Kernel can utilize this sample to understand advanced resource management and streamline migration processes.",
      "tags": [
        "advanced",
        "agent",
        "autogen_migration",
        "workflow"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AppHost\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AppHost\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the creation and configuration of an Agent Framework application with web chat capabilities using the DistributedApplication class. It outlines key concepts such as integrating AI models and setting up agent-hosting components. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this sample to understand the nuances of distributed applications and multi-component interactions.",
      "tags": [
        "agent",
        "chat",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "ServiceDefaultsExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.ServiceDefaults\\ServiceDefaultsExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.ServiceDefaults\\ServiceDefaultsExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the implementation of foundational ASP.NET services for robust web applications, specifically focusing on health checking, OpenTelemetry integration, resilience mechanisms, and service discovery. Developers migrating from frameworks such as AutoGen or Semantic Kernel can utilize this example to understand how to establish standardized diagnostics and service handling patterns in .NET environments.",
      "tags": [
        "middleware",
        "observability",
        "semantic_kernel_migration",
        "advanced"
      ]
    },
    {
      "name": "A2AAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\A2AAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\A2AAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of an A2AAgentClient leveraging the Microsoft Agent Framework for managing multiple agents in a web-based chat application. It showcases advanced concepts such as streaming responses with complex types, handling user interactions, and converting messages for A2A communication seamlessly. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can use this sample to understand best practices for implementing multi-agent systems and transitioning to A2A services.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "AgentDiscoveryClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\AgentDiscoveryClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\AgentDiscoveryClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of an Agent Discovery Client responsible for querying available agents from a specified API endpoint. It focuses on interacting with APIs through HTTP and deserializing JSON responses into .NET objects, serving as a foundational guide for integrating agents in the Agent Framework ecosystem. Developers who migrate from frameworks like Semantic Kernel, AutoGen, or LangChain should reference this example for adapting their approach to discoverability and interaction with agent-based systems.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "IAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\IAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\IAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a client interface for interacting with agents in a web-based chat application. It includes methods for streaming responses and retrieving agent-specific metadata, providing a structured foundation for integrating agent functionalities and maintaining conversational context. Developers transitioning from other frameworks, such as Semantic Kernel, AutoGen, or LangChain, can reference this to understand agent-client interactions and adapt analogous features in their projects.",
      "tags": [
        "agent",
        "chat_client",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "OpenAIChatCompletionsAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\OpenAIChatCompletionsAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\OpenAIChatCompletionsAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a client class in the .NET environment for interacting with OpenAI Chat Completions using an Agent Framework. It illustrates key functionalities such as asynchronous streaming response handling and the integration of OpenAI's ChatClient API within the agent-based architecture. Developers migrating from frameworks like AutoGen or Semantic Kernel can leverage this sample to learn how to integrate OpenAI's capabilities into their agent systems.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "OpenAIResponsesAgentClient",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\OpenAIResponsesAgentClient.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\OpenAIResponsesAgentClient.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates the implementation of a client for the Agent Framework capable of interacting with OpenAI's response protocol. It showcases the use of streaming communication through OpenAI's API, enabling incremental responses during a conversation. Developers transitioning from frameworks such as Semantic Kernel, AutoGen, or LangChain can reference this sample to adapt similar features for their applications.",
      "tags": [
        "agent",
        "chat_client",
        "streaming",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.Web\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the setup and configuration of an agent-based web application using the .NET framework. It covers implementing web components, configuring service dependencies, and integrating HTTP clients for interacting with various agents such as OpenAI-based services. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this example to understand the structure and service integration principles in .NET-based agent frameworks.",
      "tags": [
        "agent",
        "middleware",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "ChatClientConnectionInfo",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Utilities\\ChatClientConnectionInfo.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Utilities\\ChatClientConnectionInfo.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a utility class to manage essential information regarding a chat client connection, including the parsing of connection strings for configuration setups within an Agent Framework scenario. It introduces key concepts such as enumeration of providers, making it relevant for those integrating diverse conversational AI services. Developers migrating from frameworks like Semantic Kernel or LangChain can utilize this sample to understand structured methods of client connection management.",
      "tags": [
        "agent",
        "chat_client",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "ChatClientExtensions",
      "category": "AgentWebChat",
      "file_path": "dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Utilities\\ChatClientExtensions.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\AgentWebChat\\AgentWebChat.AgentHost\\Utilities\\ChatClientExtensions.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the integration and extensibility of various client providers for chat functionalities within the Agent Framework, enabling developers to utilize providers like OpenAI, Azure AI, and Ollama seamlessly. It showcases advanced configuration techniques, including OpenTelemetry instrumentation for tracing and logging capabilities, making it suitable for observing and troubleshooting AI-powered applications. Developers migrating from other frameworks, such as Semantic Kernel, AutoGen, or LangChain, can leverage this example to understand multi-provider chat system setup effectively.",
      "tags": [
        "chat_client",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentOpenTelemetry\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentOpenTelemetry\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This Dotnet code sample illustrates the integration of OpenTelemetry with the Agent Framework for handling telemetry data in applications using the Azure AI ecosystem. It demonstrates the setup of telemetry for tracing, metrics, and logs, alongside constructing an instrumented agent utilizing the ChatClientAgent pattern. Developers transitioning from other AI frameworks like Semantic Kernel or AutoGen can reference this sample to understand implementing observability and advanced agent telemetry in their projects.",
      "tags": [
        "agent",
        "intermediate",
        "observability",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\A2A\\A2AAgent_AsFunctionTools\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\A2A\\A2AAgent_AsFunctionTools\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to represent an A2A agent as a functioning toolkit within the Agent Framework using Azure OpenAI services. Key concepts include integrating external agents as tool providers, utilizing schemas to define skills, and leveraging environment configurations for runtime parameters. Developers migrating from frameworks like Autogen, Semantic Kernel, or LangChain can benefit by examining the application of function-based skill integration in crafting complex AI agent workflows.",
      "tags": [
        "agent",
        "tools",
        "intermediate",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_A2A\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_A2A\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This Dotnet code sample illustrates the initialization and use of an AI agent provided by the A2A service, demonstrating key concepts such as agent instantiation and interaction. Developers transitioning from other agent frameworks, like AutoGen, Semantic Kernel, or LangChain, can use this as a reference to understand how to work with A2A-based AI agents in the .NET ecosystem.",
      "tags": [
        "agent",
        "autogen_migration",
        "semantic_kernel_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryAgent\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryAgent\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of a simple AI agent using Azure Foundry Agents as the backend. It illustrates basic functionalities such as creating, invoking, and cleaning up persistent server-side agents. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this sample to understand how to utilize Azure Foundry's unique features, including persistent agents and thread interactions.",
      "tags": [
        "agent",
        "azure_integration",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryModel\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryModel\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET sample demonstrates the implementation of an AI agent using the Azure AI Foundry and OpenAI SDK. It covers how to configure and connect a client to Azure Foundry services and create an agent capable of interacting based on predefined instructions. Developers migrating from frameworks like Semantic Kernel or AutoGen can reference this example to understand integration with Azure-hosted AI models and leveraging OpenAI's capabilities.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIChatCompletion\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIChatCompletion\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and utilization of an AI Agent using Azure OpenAI's Chat Completion API with the Agent Framework in a .NET environment. It introduces developers to configuring agent communication with Azure's services, including setting up Azure-specific credentials and interacting with AI models for text completion tasks. Developers migrating from alternative frameworks like AutoGen, Semantic Kernel, or LangChain can explore this sample to understand the mechanism of defining agents and invoking AI functionalities within the Azure ecosystem.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIResponses\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIResponses\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a straightforward AI agent using Azure OpenAI Responses with the Agent Framework in .NET. It guides developers through integrating Azure OpenAI's services to build an agent capable of generating textual output based on specific instructions. This sample is especially beneficial for developers transitioning from frameworks such as Semantic Kernel or AutoGen, and who are looking for an alternative method to utilize Azure OpenAI's text generation capabilities.",
      "tags": [
        "agent",
        "autogen_migration",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_CustomImplementation\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_CustomImplementation\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates implementing a custom agent using the .NET Agent Framework that transforms user input to uppercase text responses. It illustrates the creation of tailored agent classes and agent threads, providing understanding of the agent execution lifecycle and message handling. Developers exploring migration from Semantic Kernel or AutoGen frameworks will find this example helpful to learn how to customize agents for specific interactions.",
      "tags": [
        "agent",
        "beginner",
        "semantic_kernel_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_Ollama\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_Ollama\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and usage of an AI agent utilizing the Ollama backend integrated through Microsoft's Agent Framework. It focuses on configuring and invoking the AI agent with specific instructions and behavior for conversational tasks. Developers transitioning from frameworks like Semantic Kernel or LangChain will find insights into leveraging Ollama's API and the utilization of Agent Framework.",
      "tags": [
        "agent",
        "autogen_migration",
        "chat_client",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_ONNX\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_ONNX\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of an AI agent using the ONNX runtime as its backend. It showcases how to initialize and utilize ONNX models for generating conversational responses in an application, specifically illustrating basic concepts of agent creation and interaction. Developers familiar with frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this sample to understand integration and usage of ONNX-based AI agents for distinct conversational tasks.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIAssistants\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIAssistants\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the usage of AI agents managed by OpenAI's Assistants API. It covers creating, managing, and invoking server-side agents using OpenAI's SDK to perform tasks such as joke generation. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can reference this sample to learn about implementing and utilizing similar functionalities using this API.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "workflow"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIChatCompletion\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIChatCompletion\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the integration of the Agent Framework with OpenAI's Chat Completion service to create a simple AI agent for conversational tasks. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can use this example to understand the usage of the OpenAIClient and AIAgent classes for building conversational agents leveraging advanced language models.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIResponses\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIResponses\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a simple AI agent using OpenAI's response generation capabilities in a .NET application. It explores concepts related to agent creation, integrating OpenAI APIs, and handling prompts for conversational outputs tailored to specific instructions. Developers migrating from frameworks like AutoGen or Semantic Kernel to OpenAI-powered agents will find this example essential for understanding basic integration and usage patterns.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "chat_client"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step01_Running\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step01_Running\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET code sample demonstrates how to use the Agent Framework integrated with Azure OpenAI to create and interact with a conversational AI agent. It covers initializing an AI Agent using Azure credentials, defining specific behavior and instructions, and invoking the agent for both synchronous and streaming interactions. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand the basics of setting up and operating AI agents using Azure's OpenAI services.",
      "tags": [
        "agent",
        "beginner",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step02_MultiturnConversation\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step02_MultiturnConversation\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a multi-turn conversation agent using the Agent Framework with the Azure OpenAI service. Key concepts include initiating conversation threads, leveraging streaming responses, and maintaining contextual continuity in multi-turn interactions. It is especially useful for developers migrating from frameworks like Semantic Kernel or LangChain, providing insight into designing conversational agents within the .NET ecosystem.",
      "tags": [
        "agent",
        "multiturn",
        "semantic_kernel_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step03_UsingFunctionTools\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step03_UsingFunctionTools\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation and utilization of an AI Agent from the Microsoft `Azure.AI.OpenAI` namespace, showcasing both non-streaming and streaming interaction functionalities. It includes the incorporation of function tools allowing the agent to execute predefined methods, such as fetching weather data for specified locations. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can use this example to understand how to integrate and utilize function tools within an AI Agent structure effectively.",
      "tags": [
        "agent",
        "tools",
        "streaming",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step04_UsingFunctionToolsWithApprovals\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step04_UsingFunctionToolsWithApprovals\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of a Chat Client Agent incorporating function tools that require human approval for execution. It showcases the integration of extensions like 'ApprovalRequiredAIFunction' for adding human-in-the-loop interactions and describes how agents can handle both streaming and non-streaming responses. Developers transitioning from frameworks such as Semantic Kernel, AutoGen, or LangChain can utilize this sample to understand human review integration for function execution in agent workflows.",
      "tags": [
        "agent",
        "human_in_loop",
        "semantic_kernel_migration",
        "tools"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step05_StructuredOutput\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step05_StructuredOutput\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of ChatClientAgent within a .NET environment for generating structured output using the Agent Framework. It showcases the configuration of agents to provide specific information responses in JSON formats, employing structured data classes for detail-oriented development purposes. Developers migrating from frameworks such as AutoGen or LangChain will find this demonstration useful for understanding similar paradigms in the .NET ecosystem.",
      "tags": [
        "agent",
        "structured_output",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step06_PersistedConversations\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step06_PersistedConversations\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the creation and utilization of an AI agent using the Azure OpenAI Service and the Agent Framework, specifically focusing on persisting conversational state to storage for subsequent restoration. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can use this sample to understand state persistence and serialization/deserialization techniques for consistent AI interactions.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step07_3rdPartyThreadStorage\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step07_3rdPartyThreadStorage\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates advanced usage of the Agent framework to create a conversational AI agent with a persistence mechanism using vector storage. It incorporates Azure OpenAI services and showcases how conversation threads can be serialized and restored with state tracking. Developers transitioning from frameworks like Semantic Kernel or AutoGen can reference this sample to understand how to implement sophisticated conversation state management while leveraging Microsoft-hosted AI services.",
      "tags": [
        "agent",
        "chat_client",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step08_Observability\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step08_Observability\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and utilization of a simple AI agent with integration to Azure OpenAI as the backend for natural language processing. It introduces the incorporation of observability by logging telemetry data using OpenTelemetry and integrating Application Insights for enhanced monitoring. Developers transitioning from other frameworks such as Semantic Kernel or LangChain should reference this guide to understand effective techniques for adding observability to AI agents.",
      "tags": [
        "agent",
        "observability",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step09_DependencyInjection\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step09_DependencyInjection\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of an AI-based agent using .NET with dependency injection for constructing components. The focus is on creating and registering AI agents, such as a ChatClientAgent, and integrating them with Azure OpenAI services for natural language responses and user interactions. Developers migrating from AutoGen, Semantic Kernel, or LangChain frameworks can utilize this example to understand service registration and dependency management patterns effectively.",
      "tags": [
        "agent",
        "beginner",
        "autogen_migration",
        "dependency_injection"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step10_AsMcpTool\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step10_AsMcpTool\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to expose an AI agent as an MCP (Model Context Protocol) tool using the Azure AI Agents Persistent library and Azure Identity on a .NET stack. It includes creating a server-side persistent agent, configuring its metadata (instructions, name, description), and converting it into an MCP tool for integration with external systems via standardized protocols. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain would find this sample useful to understand the adaptation of agent functionalities employing MCP paradigms.",
      "tags": [
        "agent",
        "tools",
        "langchain_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step11_UsingImages\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step11_UsingImages\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates integrating image analysis capabilities within an AI agent using the Azure OpenAI and Identity libraries in a .NET environment. It illustrates key concepts regarding multi-modality handling, such as incorporating text and image inputs for interactive AI responses. Developers migrating from frameworks like Semantic Kernel or LangChain can use this example to understand multi-modal application development using Azure's AI services.",
      "tags": [
        "agent",
        "multimodal",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step12_AsFunctionTool\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step12_AsFunctionTool\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the creation of an AI agent using Azure OpenAI services and the Microsoft Agents framework. It illustrates how to compose a functional tool into an agent and interconnect agents for hierarchical task delegation. This sample is particularly beneficial for developers migrating from frameworks such as AutoGen, Semantic Kernel, or LangChain, showcasing effective patterns for implementing interactive and task-driven agents.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step13_Memory\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step13_Memory\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample provides an introductory guide on integrating a custom memory component within the Agent Framework for managing user context in conversational agents. It demonstrates concepts such as conversational thread initialization, memory serialization and deserialization, handling user-specific context, and integrating Azure OpenAI services for enhanced user interaction. Developers transitioning from frameworks like AutoGen, Semantic Kernel, or LangChain can reference this example to understand the architecture and functionality for custom memory management and leveraging Azure's tools.",
      "tags": [
        "agent",
        "semantic_kernel_migration",
        "memory",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step14_Middleware\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step14_Middleware\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates creating an advanced Azure OpenAI Agent using multiple middleware layers. It highlights concepts such as function invocation, PII filtering, guardrails for harmful content, and human-in-loop operations for function call approvals. Developers migrating from frameworks like Semantic Kernel or AutoGen should refer to this sample for insights into leveraging middleware to enhance AI agent workflows.",
      "tags": [
        "agent",
        "middleware",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step15_Plugins\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step15_Plugins\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to integrate plugins within an AI agent framework using the Azure OpenAI Service. It covers registering services, injecting dependencies into plugin classes, and exposing specific plugin methods for interaction via the agent. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain will find this example useful for understanding plugin utilization and service dependency management in the context of developing AI-driven applications.",
      "tags": [
        "agent",
        "autogen_migration",
        "semantic_kernel_migration",
        "plugins"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step16_ChatReduction\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step16_ChatReduction\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a chat history reducer within an agent using the Azure OpenAI SDK. It showcases the creation and configuration of an AI agent with custom message storage and history reduction, exemplifying interaction limitations with reduced context. Developers migrating from frameworks like AutoGen or Semantic Kernel can reference this sample for implementing efficient context management strategies in conversational AI applications.",
      "tags": [
        "agent",
        "chat_client",
        "advanced",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step17_BackgroundResponses\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step17_BackgroundResponses\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the integration of background responses and streaming capabilities within the Azure OpenAI-powered Agent Framework. It introduces the utilization of agent threads alongside continuation tokens to handle both regular and interrupted streaming flows. Developers migrating from frameworks such as Semantic Kernel or AutoGen can refer to this example for implementing robust streaming response patterns while maintaining seamless flow continuation.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\Agent_OpenAI_Step01_Running\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\Agent_OpenAI_Step01_Running\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and utilization of a basic AI agent using OpenAI as the backend, leveraging the Microsoft Agent Framework. It covers key concepts such as agent configuration, interacting with the OpenAI model via chat messages, and using asynchronous and streaming functionalities. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this guide to understand how to implement similar agent-based workflows in the Microsoft ecosystem.",
      "tags": [
        "agent",
        "beginner",
        "chat_client",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\Agent_OpenAI_Step02_Reasoning\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\Agent_OpenAI_Step02_Reasoning\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This example demonstrates the implementation of an AI agent leveraging OpenAI's reasoning capabilities within a .NET framework using Microsoft and OpenAI libraries. Key concepts include configuring reasoning options, executing streaming and non-streaming inference tasks, and analyzing token usage from API responses. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain can gain insights into adapting their implementations to integrate reasoning and streaming capabilities effectively.",
      "tags": [
        "agent",
        "streaming",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the usage of the Model Context Protocol (MCP) Server for creating an AI agent using Azure OpenAI and community-defined tools. It covers the initialization and interaction with the MCP server, retrieving tool lists, and configuring the AI agent with custom instructions and tool integration. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this as an introduction to implementing agents utilizing external tools and Azure services.",
      "tags": [
        "agent",
        "intermediate",
        "semantic_kernel_migration",
        "tools"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server_Auth\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server_Auth\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to create a simple AI agent that interacts with an authenticated Model Context Protocol (MCP) server hosting multiple tools. Key concepts include configuring an OAuth authorization flow, implementing a custom HttpClient transport, and using Azure OpenAI services to integrate with the MCP server's tool capabilities. Developers migrating from frameworks such as Semantic Kernel or LangChain can utilize this sample to understand agent construction with tool integration and authentication.",
      "tags": [
        "agent",
        "auth",
        "semantic_kernel_migration",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\FoundryAgent_Hosted_MCP\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\FoundryAgent_Hosted_MCP\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a hosted AI agent using Azure Foundry Agents as the backend and showcases its integration with Microsoft Learn resource via a custom MCP tool. It covers concepts such as persistent agents, tool definitions, and invocation run options, providing a comprehensive understanding of these functionalities. Developers transitioning from frameworks like AutoGen or Semantic Kernel can reference this sample to learn about hosted persistent agent creation and utilization.",
      "tags": [
        "agent",
        "tools",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Loop\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Loop\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates implementing a looping workflow within the Agent Framework to create a number guessing game. Key concepts include the use of executors, feedback loops, signals, and asynchronous communication within the workflow. Developers transitioning from frameworks like AutoGen or Semantic Kernel can leverage this example to understand structured workflow execution and iterative message passing.",
      "tags": [
        "workflow",
        "agent",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\SharedStates\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\SharedStates\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the concept of workflows utilizing shared states for task coordination by employing fan-out and fan-in patterns. The implementation showcases how executors interact with a centralized state management to perform complex operations such as file content processing and result aggregation. Developers transitioning from frameworks like Semantic Kernel, AutoGen, or LangChain can use this sample to understand workflow structuring and shared state handling within the Agent Framework.",
      "tags": [
        "workflow",
        "intermediate",
        "fan_out",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\SharedStates\\Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\SharedStates\\Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to manage shared states and resources in workflows using a simple utility for loading resource files dynamically within the WorkflowSharedStatesSample namespace. Developers transitioning from frameworks like Semantic Kernel or LangChain can use this example to understand the implementation of shared resource management, improving modularity and scalability in their applications.",
      "tags": [
        "workflow",
        "shared_states",
        "beginner",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Visualization\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Visualization\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to utilize the visualization capabilities of workflows using the Agent Framework. It leverages the ToMermaidString() and ToDotString() methods to generate visual representations of workflows in Mermaid and Graphviz DOT formats. Developers transitioning from frameworks like Semantic Kernel or AutoGen can utilize this sample to understand efficient workflow mapping and debugging techniques.",
      "tags": [
        "workflow",
        "visualization",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Agents\\CustomAgentExecutors\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Agents\\CustomAgentExecutors\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and integration of custom agent executors within a workflow using the Microsoft Agent Framework. It exemplifies advanced patterns such as structured outputs, event-driven monitoring, and iterative improvement processes to control agent behavior effectively. Developers migrating from other frameworks like Semantic Kernel or AutoGen should reference this sample to understand agent customization in workflows.",
      "tags": [
        "agent",
        "workflow",
        "advanced",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Agents\\FoundryAgent\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Agents\\FoundryAgent\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This .NET code sample demonstrates how to use Azure Foundry's agent capabilities for building and executing workflows. It highlights key concepts, including setting up persistent agents, constructing workflows using multiple agents, and managing agent execution with streaming. Developers transitioning from frameworks like Semantic Kernel or AutoGen can leverage this sample for understanding agent-based workflow orchestration and execution.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Agents\\WorkflowAsAnAgent\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Agents\\WorkflowAsAnAgent\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates workflows that operate as agents within the Microsoft Agent Framework. It provides an example of creating a workflow with multiple agents to process multilingual input concurrently, and demonstrates interactions with the workflow using streaming responses. Developers migrating from frameworks such as Semantic Kernel or LangChain can utilize this sample to understand collaborative agent orchestration and streaming communication capabilities.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Agents\\WorkflowAsAnAgent\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Agents\\WorkflowAsAnAgent\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the implementation of a concurrent workflow using two language agents managed by Microsoft's Agent Framework. It demonstrates advanced concepts such as concurrent agent initialization and aggregation of results using executors, suitable for handling language translation tasks. Developers coming from frameworks like Semantic Kernel or AutoGen can refer to this example to understand similar parallel processing capabilities in the Agent Framework.",
      "tags": [
        "workflow",
        "agent",
        "semanti_kernel_migration",
        "advanced"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndRehydrate\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndRehydrate\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement and utilize checkpoints within workflows using the Agent Framework. It showcases the creation, saving, and rehydration of workflow state allowing for interrupted workflows to resume from a saved state. Developers migrating from frameworks like Semantic Kernel or LangChain can reference this guide to understand robust workflow execution and state persistence mechanisms.",
      "tags": [
        "agent",
        "workflow",
        "checkpoint",
        "advanced"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndRehydrate\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndRehydrate\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code snippet demonstrates the implementation of a workflow in the Microsoft Agent Framework, showcasing checkpoint and state restoration mechanisms. It builds a number guessing game using two custom executors, which exchange signals to progress through the game. Developers migrating from other frameworks such as Semantic Kernel or LangChain can reference this sample to understand advanced state management and inter-executor communication patterns in workflows.",
      "tags": [
        "workflow",
        "checkpoint",
        "autogen_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndResume\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndResume\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates how to utilize checkpoints for saving and restoring the state of workflows using the Agent Framework. It introduces concepts such as super steps, checkpoint management, and workflow continuation. Developers transitioning from frameworks like Semantic Kernel or other workflow systems can reference this sample to understand the application of checkpointing in managing complex processes efficiently.",
      "tags": [
        "workflow",
        "advanced",
        "checkpoint",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndResume\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointAndResume\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample introduces the use of the WorkflowFactory class to construct a workflow utilizing Microsoft's Agent Framework. It demonstrates a practical implementation of a number guessing game leveraging two executors\u2014one for making guesses and another for providing feedback\u2014and supports state checkpointing and restoration. This sample is beneficial for developers migrating from other frameworks seeking insight into workflow management and state persistence in the Agent Framework.",
      "tags": [
        "workflow",
        "checkpoint",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointWithHumanInTheLoop\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointWithHumanInTheLoop\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This DotNet sample demonstrates the implementation of a checkpoint-enabled workflow incorporating human-in-the-loop interactions within the Agent Framework. The workflow engages the user in a guessing game, showcasing concepts such as Checkpoint management and interactive human feedback integration during execution. Developers migrating from frameworks like AutoGen or Semantic Kernel should use this sample to understand managing workflow states, enabling human-in-loop processes, and integrating interactive user decisions.",
      "tags": [
        "agent",
        "workflow",
        "human_in_loop",
        "checkpoint"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointWithHumanInTheLoop\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Checkpoint\\CheckpointWithHumanInTheLoop\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the creation and utilization of workflows within the Microsoft Agent Framework. It specifically highlights human-in-the-loop integration and state persistence using a number guessing game. Developers migrating from other frameworks such as AutoGen, Semantic Kernel, or LangChain will benefit from studying this example to understand workflow design and checkpointing in agent-centric environments.",
      "tags": [
        "workflow",
        "checkpoint",
        "human_in_loop",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Concurrent\\Concurrent\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Concurrent\\Concurrent\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample provides an example of implementing concurrent workflows using the 'fan-out' and 'fan-in' patterns within a .NET application. It leverages the Agent Framework to showcase how to execute parallel tasks with separate AI agents processing distinct aspects of the same query, and subsequently aggregating the results for a unified output. Developers migrating from frameworks like Semantic Kernel or LangChain will find this pattern useful for tasks requiring multi-perspective analysis or parallel processing.",
      "tags": [
        "workflow",
        "advanced",
        "semantic_kernel_migration",
        "parallel"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Concurrent\\MapReduce\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Concurrent\\MapReduce\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a Map-Reduce workflow using the Agent Framework for processing large-scale textual data. It showcases parallel data processing techniques, fan-out and fan-in workflow modeling, persisting intermediate results to disk for better memory management, and visualization of workflow structures for debugging and documentation purposes. Developers migrating from other frameworks such as AutoGen, Semantic Kernel, or LangChain can reference this sample to understand concurrency management, data flow, and workflow architecture in the Agent Framework.",
      "tags": [
        "workflow",
        "advanced",
        "parallel",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\01_EdgeCondition\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\01_EdgeCondition\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the utilization of edge conditions within workflow management to route data intelligently based on predefined criteria. Key concepts covered include agent creation for specific functions, integration of AI-based detection and decision-making, and creation of sophisticated automation pipelines for intelligent routing. This example is particularly relevant for developers transitioning from frameworks such as AutoGen, LangChain, or Semantic Kernel, who aim to implement complex, conditional workflows using the .NET Agent framework.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\01_EdgeCondition\\Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\01_EdgeCondition\\Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the utilization of resource management within a workflow setup, specifically addressing loading resource files dynamically for conditional processes. It introduces fundamental concepts of maintaining and accessing resources in a structured Workflow Edge Context. Developers migrating from frameworks such as LangChain or Semantic Kernel might find this sample useful for understanding conditional workflow execution based on resource utilization.",
      "tags": [
        "workflow",
        "resources",
        "semantic_kernel_migration",
        "beginner"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\02_SwitchCase\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\02_SwitchCase\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of advanced switching mechanisms in Azure OpenAI workflows using the Agent Framework. It elaborates on constructing workflows with conditional routing utilizing a switch-case pattern, along with integration of custom AI agents for specific tasks like spam detection and email assistance. Developers migrating from frameworks such as Semantic Kernel or AutoGen will find this beneficial for understanding structured programming approaches in workflow automation and stateful AI execution.",
      "tags": [
        "agent",
        "workflow",
        "structured_output",
        "intermediate"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\02_SwitchCase\\Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\02_SwitchCase\\Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the use of a helper class `Resources` for managing resource files in a Workflow framework. It introduces efficient methods to read and manipulate external files, emphasizing the importance of structured resource handling in applications. Developers transitioning from frameworks like Semantic Kernel or LangChain can adapt this approach for consistent and accessible resource management.",
      "tags": [
        "workflow",
        "autogen_migration",
        "beginner",
        "tools"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\03_MultiSelection\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\03_MultiSelection\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to construct and execute a workflow using the Microsoft Agent Framework by leveraging multi-selection management and conditional processing. It showcases parallel execution of multiple agents based on email content analysis and conditional decisions for data processing, making it ideal for developers transitioning from frameworks like Semantic Kernel or AutoGen to implement complex processing workflows.",
      "tags": [
        "workflow",
        "parallel",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Resources",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\03_MultiSelection\\Resources.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\ConditionalEdges\\03_MultiSelection\\Resources.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample provides a utility for reading resource files, demonstrating how to manage external assets effectively in a .NET workflow application. It introduces concepts relevant to workflows including file handling and modular designs for resource management. Developers migrating from frameworks like Semantic Kernel or AutoGen can refer to this sample for insights into integrating resource handling within multi-selection workflows.",
      "tags": [
        "workflow",
        "beginner",
        "autogen_migration",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Generated",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteCode\\Generated.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteCode\\Generated.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of declarative workflows using Microsoft's Agent Framework. It illustrates the use of Power FX formulas for defining dynamic workflow behaviors, such as variable assignment and environment initialization, within a runtime context. Developers migrating from other frameworks like Semantic Kernel or LangChain can reference this sample to understand structured decision-making and state management strategies in an Agent-driven ecosystem.",
      "tags": [
        "agent",
        "workflow",
        "advanced",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteCode\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteCode\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to execute a declarative workflow represented as code using the Agent Framework. It explores concepts such as initializing the DeclarativeWorkflowBuilder with specific configuration options, utilizing an agent provider, and managing workflow execution steps and events programmatically. This sample is useful for developers migrating from frameworks like Semantic Kernel or AutoGen to understand the explicit execution flow of declarative workflows within Azure's Agent Framework.",
      "tags": [
        "agent",
        "workflow",
        "autogen_migration",
        "streaming"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteWorkflow\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\ExecuteWorkflow\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample provides a comprehensive approach to implementing workflows using declarative YAML definitions facilitated by the Azure Agent Framework. It demonstrates checkpointing, external request handling, and the incorporation of AI functions within the workflows, showcasing advanced techniques for managing persistent and interactive workflows. Developers transitioning from platforms like Semantic Kernel or similar will find guidance on utilizing YAML for defining workflows and handling interaction seamlessly.",
      "tags": [
        "workflow",
        "declarative",
        "checkpoint",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\GenerateCode\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\GenerateCode\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to transform declarative YAML-based workflow definitions into generated C# code using the DeclarativeWorkflowBuilder from the Agent Framework. It illustrates parsing configuration files, code generation, and runtime execution integration. Developers migrating from frameworks such as AutoGen or LangChain can reference this sample to understand alternative methods for defining workflows declaratively and generating structured code for further customization.",
      "tags": [
        "workflow",
        "intermediate",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\HumanInTheLoop\\HumanInTheLoopBasic\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\HumanInTheLoop\\HumanInTheLoopBasic\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates a basic human-in-the-loop workflow using the Microsoft Agent Framework AI. It features a simple number guessing game, illustrating the implementation of RequestPort, ExternalRequest, and response handling for interaction between the workflow and external entities. Developers transitioning from frameworks like Semantic Kernel, LangChain, or AutoGen should reference this sample to understand how to model interactive processes in Agent workflows.",
      "tags": [
        "human_in_loop",
        "workflow",
        "autogen_migration",
        "beginner"
      ]
    },
    {
      "name": "WorkflowFactory",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\HumanInTheLoop\\HumanInTheLoopBasic\\WorkflowFactory.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\HumanInTheLoop\\HumanInTheLoopBasic\\WorkflowFactory.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the creation of a custom workflow using the Agent Framework, specifically implementing a human-in-the-loop number guessing game. It highlights concepts such as request ports, executors, workflow builders, and asynchronous communication within workflows, providing insights into structured interactions between components. This sample is particularly beneficial for developers migrating from frameworks such as Semantic Kernel, AutoGen, or LangChain, as it showcases workflow orchestration and human interaction within a programmable interface.",
      "tags": [
        "workflow",
        "human_in_loop",
        "structured_output",
        "autogen_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Observability\\ApplicationInsights\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Observability\\ApplicationInsights\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates how to implement observability in workflows using the Agent Framework, integrating Application Insights for trace visualization. It demonstrates the construction of a workflow consisting of sequential executors that process text, supported by OpenTelemetry resources and Azure Monitor exporters. Developers migrating from Semantic Kernel, Autogen, or LangChain frameworks will find this example useful for adopting comprehensive monitoring practices in their applications.",
      "tags": [
        "workflow",
        "observability",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Observability\\AspireDashboard\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Observability\\AspireDashboard\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates how to implement and enable observability in AI-driven workflows using OpenTelemetry, with data integration to an Aspire Dashboard. It provides an example of a text transformation pipeline, showcasing OpenTelemetry configuration for trace monitoring and executor behaviors for sequential data processing. Developers migrating from frameworks like Semantic Kernel and LangChain can leverage this sample to understand effective workflow observability patterns.",
      "tags": [
        "workflow",
        "observability",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\01_ExecutorsAndEdges\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\01_ExecutorsAndEdges\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of a workflow using executors and edges to process text transformations in the Microsoft Agent Framework. Specifically, it illustrates how to construct a text processing pipeline with sequential executors, where data passes through stages such as converting strings to uppercase and then reversing them. Developers transitioning from frameworks like AutoGen or Semantic Kernel can use this example to understand concepts like sequential task execution and structured workflows.",
      "tags": [
        "workflow",
        "beginner",
        "semantic_kernel_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\02_Streaming\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\02_Streaming\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This Dotnet sample introduces the concept of streaming outputs within workflow executions, utilizing Microsoft Agent Framework's workflow system. It demonstrates key functionalities such as constructing workflows with connected executors, enabling real-time event observation, and processing inputs through sequential text transformations. Ideal for developers transitioning from frameworks like Semantic Kernel or LangChain, it highlights how streaming can enhance user interaction and provide better insights throughout the workflow process.",
      "tags": [
        "workflow",
        "streaming",
        "autogen_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\03_AgentsInWorkflows\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\03_AgentsInWorkflows\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the integration and utilization of AI agents within a workflow pipeline to perform language translations in multiple stages. Key concepts covered include asynchronous workflows, the use of Azure's OpenAI service with the Microsoft Agent Framework, and streaming execution for real-time monitoring of workflow events. Developers migrating from frameworks like LangChain or Semantic Kernel can reference this sample for insights into embedding AI-driven processes seamlessly into a robust workflow structure.",
      "tags": [
        "agent",
        "workflow",
        "streaming",
        "langchain_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\04_AgentWorkflowPatterns\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\04_AgentWorkflowPatterns\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates the implementation of various agent workflow patterns such as sequential, concurrent, handoffs, and group chat, leveraging the Microsoft Agent Framework. It illustrates usage of the AgentWorkflowBuilder for integrating AI agents into workflows, and highlights interaction with Azure OpenAI services for executing complex tasks. Developers familiar with other frameworks like Semantic Kernel or LangChain can reference this sample as a guide to adapt their solutions into the Agent Framework efficiently.",
      "tags": [
        "agent",
        "workflow",
        "semantic_kernel_migration",
        "intermediate"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\05_MultiModelService\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\05_MultiModelService\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample demonstrates the implementation of a multi-agent system using dotnet's Agent Framework to process tasks sequentially. It introduces core concepts such as agent coordination workflows and multi-model utilization, showcasing practical use cases of integrating different AI services into cohesive pipelines. Developers migrating from frameworks like Semantic Kernel, AutoGen, or LangChain can refer to this to understand agent orchestration strategies in dotnet.",
      "tags": [
        "agent",
        "workflow",
        "multimodal",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\06_SubWorkflows\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\06_SubWorkflows\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This code sample demonstrates how to build complex workflows by using hierarchical workflows within Microsoft's Agent Framework. The sample builds a text processing sub-workflow (with functionalities like text capitalization, reversing, and appending a suffix) that is then leveraged as an executor within a parent workflow that performs additional operations. Developers transitioning from other workflow-based frameworks such as LangChain or Semantic Kernel can use this example to explore modular design and hierarchical workflow composition for text transformation tasks.",
      "tags": [
        "workflow",
        "intermediate",
        "langchain_migration",
        "structured_output"
      ]
    },
    {
      "name": "Program",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\07_MixedWorkflowAgentsAndExecutors\\Program.cs",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\07_MixedWorkflowAgentsAndExecutors\\Program.cs",
      "language": "dotnet",
      "processed": true,
      "description": "This sample illustrates the integration of AI-powered agents and custom executors within a cohesive workflow using the Agent Framework in a .NET environment. It showcases how to build complex pipelines combining deterministic data processing and intelligent decision-making. Developers migrating from frameworks like Semantic Kernel or LangChain will find this example beneficial for understanding seamless interaction between various components to achieve advanced AI system tasks.",
      "tags": [
        "agent",
        "workflow",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "dotnet_overview",
      "category": "root",
      "file_path": "dotnet\\samples\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an overview of the Microsoft Agent Framework, specifically highlighting its capability to build AI-powered agents using various inference services. It explains foundational concepts such as creating proxy agents and using telemetry. Developers migrating from Semantic Kernel or other frameworks such as AutoGen or LangChain can reference this guide for a smooth transition.",
      "tags": [
        "documentation",
        "agent",
        "semantic_kernel_migration",
        "beginner"
      ]
    },
    {
      "name": "A2AClientServer_documentation",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides comprehensive guidance on implementing the A2A Client-Server model using the official A2A C# SDK. It covers the configuration, setup, and use of A2A agents for communication and data exchange between clients and servers, as well as testing through REST clients and the A2A Inspector. Useful for developers migrating from frameworks like LangChain or Semantic Kernel to understand server-side agent integration.",
      "tags": [
        "documentation",
        "agent",
        "langchain_migration",
        "tools"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an overview of the Agent Framework's foundational features and concepts, offering step-by-step guidance on utilizing agents, workflows, OpenTelemetry, and specific integrations such as OpenAI exchange types. It serves as an essential resource for users aiming to understand basic configurations and functionalities, especially those transitioning from frameworks like AutoGen or Semantic Kernel.",
      "tags": [
        "getting_started",
        "agent_framework",
        "tutorial",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "A2AClientServer_documentation",
      "category": "A2AClientServer",
      "file_path": "dotnet\\samples\\A2AClientServer\\A2AClient\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\A2AClientServer\\A2AClient\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a tutorial for creating and running an Agent-to-Agent (A2A) client application using a command-line interface. It details steps to set up and execute the client, making queries to agents accessible through specified URLs utilizing the A2A protocol. Developers transitioning from other frameworks like Semantic Kernel or LangChain can reference this guide to understand A2A client-server interactions and environment configuration for agent-based systems.",
      "tags": [
        "documentation",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\A2A\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\A2A\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides detailed instructions and sample implementations for developing and interacting with Agent-to-Agent (A2A) functionalities in the Agent Framework. It offers guidance on implementing agents as functional tools to enable skill sharing between agents, and covers execution methods within development environments such as Visual Studio or the command line. Developers transitioning from frameworks like Semantic Kernel or LangChain will find this helpful for understanding the A2A integration pattern.",
      "tags": [
        "documentation",
        "agent",
        "tutorial",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentOpenTelemetry\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentOpenTelemetry\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide provides a detailed walkthrough on integrating the Microsoft Agent Framework with OpenTelemetry and utilizing Azure OpenAI services for enhanced observability and interaction metrics. It is particularly useful for developers seeking to monitor and optimize AI-based applications. The guide is suited for migrations from other telemetry and agent frameworks such as AutoGen, Semantic Kernel, and LangChain.",
      "tags": [
        "documentation",
        "observability",
        "agent",
        "advanced"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation details the process of creating an AIAgent instance using various available providers within the Agent Framework. It covers examples with different implementation types, including integrations with platforms like Azure and OpenAI, highlighting key concepts such as agent customization and deployment. Developers adapting their solutions from AutoGen, Semantic Kernel, or LangChain should reference this material to understand foundational capabilities and integration approaches for the Agent Framework.",
      "tags": [
        "guide",
        "agent",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces developers to the fundamental concepts of the Agent Framework by providing a series of step-by-step samples that cover essential capabilities, such as running agents, multi-turn conversations, and integrating functions with human approvals. It is particularly useful for developers transitioning from frameworks like AutoGen or Semantic Kernel, as it provides practical examples and clear guidance on implementing varied use cases with an advanced .NET-based tool.",
      "tags": [
        "documentation",
        "agent",
        "tutorial",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentWithOpenAI\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README serves as an introduction to integrating the Agent Framework with OpenAI SDK for .NET applications, addressing compatibility challenges between exchange types. It provides step-by-step documentation for creating AI agents using OpenAI SDK within the framework. Useful for developers transitioning from Semantic Kernel, LangChain, or AutoGen frameworks seeking OpenAI-specific setup and execution guidance.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a beginner-friendly introduction to utilizing the Model Content Protocol (MCP) Server Tools within the Agent Framework. It explores the prerequisites and step-by-step instruction for integrating Azure OpenAI service endpoints with the agent, including authorization methods and environment configuration. Developers transitioning from frameworks such as Semantic Kernel, AutoGen, or LangChain will find this guide indispensable for understanding MCP implementations.",
      "tags": [
        "getting_started",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an introduction to core functionalities in workflows within the Agent Framework, including executors, agents, streaming, and complex workflow patterns. It is a valuable resource for developers transitioning from other frameworks such as Semantic Kernel or LangChain, focusing on foundational concepts, advanced capabilities, and practical examples for building robust workflows.",
      "tags": [
        "guide",
        "workflow",
        "semantic_kernel_migration",
        "structured_output"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\A2A\\A2AAgent_AsFunctionTools\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\A2A\\A2AAgent_AsFunctionTools\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides an overview of how to integrate the A2A agent into external systems as function tools, showcasing the mapping of agent skills into callable functions for seamless interoperability. It explains setup prerequisites and environmental configurations, making it ideal for developers looking to migrate from frameworks like Semantic Kernel or LangChain.",
      "tags": [
        "documentation",
        "agent",
        "tools",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_A2A\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_A2A\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README documentation provides essential steps to set up and utilize the A2A Agent Framework for creating AI-based agents capable of engaging in chat interactions. It covers advanced configurations for private discovery mechanisms and demonstrates integration of AIAgent features with a sample implementation. Developers transitioning from frameworks like Semantic Kernel or LangChain would benefit from this guide to understand the usage of A2AClient and AIAgent functionalities.",
      "tags": [
        "guide",
        "agent",
        "intermediate",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryAgent\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryAgent\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides essential setup procedures for using the Agent Framework with Azure Foundry, including environment configuration and authentication setup using Azure CLI. It is ideal for developers migrating from frameworks such as AutoGen or Semantic Kernel who wish to understand initial integration steps with Azure Foundry. The guide covers aspects related to service endpoint and deployment configuration.",
      "tags": [
        "agent",
        "documentation",
        "autogen_migration",
        "azure_foundry"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryModel\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureFoundryModel\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README provides a comprehensive guide for implementing a basic AI agent using OpenAI SDK with Azure AI Foundry, demonstrating model deployment and integration techniques. Developers switching from frameworks like AutoGen or Semantic Kernel can benefit from understanding the provider setup and model selection within the Azure ecosystem.",
      "tags": [
        "documentation",
        "agent",
        "autogen_migration",
        "tutorial"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIChatCompletion\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIChatCompletion\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation serves as an introduction to setting up and deploying an agent within the Agent Framework, integrating with Azure OpenAI services. It explains the necessary prerequisites and environment configurations, aiding developers migrating from frameworks like Semantic Kernel or LangChain to establish a foundational understanding of using Azure OpenAI within the .NET ecosystem.",
      "tags": [
        "documentation",
        "agent",
        "azure_openai",
        "beginner"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIResponses\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_AzureOpenAIResponses\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README serves as an initial step for developers learning to implement an Azure OpenAI-powered Agent within the .NET framework. It outlines necessary prerequisites including environment setups for integrating Azure services, demonstrating core functionalities of the Agent Framework. Migrate to this guide when adopting Azure solutions or transitioning from frameworks like LangChain or Semantic Kernel to leverage .NET and Azure OpenAI capabilities.",
      "tags": [
        "documentation",
        "agent",
        "azure_openai",
        "beginner"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_CustomImplementation\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_CustomImplementation\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide introduces developers to creating a fully custom agent within the Agent Framework, focusing on its implementation independent of external AI services. Key concepts demonstrated include synchronous and streaming invocation modes for user inputs and scenarios where custom AI models or rule-based implementations are required. Developers familiar with frameworks like Semantic Kernel, AutoGen, or LangChain can leverage this documentation to transition their agent implementations for specialized use cases.",
      "tags": [
        "guide",
        "agent",
        "custom_logic",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_Ollama\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_Ollama\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation explains the setup and initial configuration of an Agent Framework with Ollama integration for conversational AI. It includes steps to set up prerequisites, install necessary tools, and initialize the environment variables for Docker and Ollama. Developers transitioning from frameworks such as Semantic Kernel, AutoGen, or LangChain to Agent Framework should consult this guide for a seamless migration process.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_ONNX\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_ONNX\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This document provides instructions for developers regarding the use of an ONNX-based Agent within the Agent Framework, focusing on the setup and environmental configuration required for integration. The guide specifically outlines how ONNX model limitations pertain to functionality within agents, making it valuable for users adapting solutions from frameworks supporting function tools, such as LangChain or AutoGen.",
      "tags": [
        "getting_started",
        "onnx",
        "agent_framework",
        "langchain_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIAssistants\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIAssistants\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation details setting up the Agent Framework with OpenAI Assistants, highlighting the integration process with OpenAI's services and prerequisites for the deprecated Assistants API migration. It serves as a useful guide for developers transitioning from tools such as Semantic Kernel and LangChain.",
      "tags": [
        "documentation",
        "agent",
        "getting_started",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIChatCompletion\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIChatCompletion\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation serves as a comprehensive guide for developers starting with the Agent Framework, illustrating the setup and configuration required for integration with OpenAI's language models. By detailing environment variable configuration and dependencies, it provides clear instructions suitable for developers migrating from alternative frameworks such as Semantic Kernel, AutoGen, or LangChain.",
      "tags": [
        "guide",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIResponses\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\AgentProviders\\Agent_With_OpenAIResponses\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide provides a foundational overview for setting up and utilizing the Agent Framework with OpenAI responses. It covers configuration prerequisites, including SDK requirements and environment variable settings. Developers migrating from similar frameworks like AutoGen, Semantic Kernel, or LangChain will benefit from understanding the initial setup process and integration requirements.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step10_AsMcpTool\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step10_AsMcpTool\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation explains how to expose an AI agent as a tool within the MCP framework. It provides step-by-step instructions for setting up and running the agent, including configuration of environment variables and integration with the MCP Inspector. Developers familiar with AutoGen, Semantic Kernel, or LangChain who are transitioning their AI tools into the MCP environment will find this guide particularly useful.",
      "tags": [
        "tutorial",
        "agent",
        "tools",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step11_UsingImages\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step11_UsingImages\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation introduces the creation and utilization of a vision-enabled AI agent capable of processing multimodal input, specifically combining text and image data. It illustrates the deployment of agents integrated with Azure OpenAI's GPT-4 capabilities for enhanced image analysis and description functionalities. Ideal for developers looking to enhance or migrate multimodality capabilities from other frameworks like Semantic Kernel and LangChain.",
      "tags": [
        "tutorial",
        "agent",
        "multimodal",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step14_Middleware\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step14_Middleware\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide introduces developers to the integration of middleware within the Agent Framework, enabling advanced capabilities such as intercepting chat client calls, applying agent guardrails, and configuring function invocation behaviors. It is particularly useful for those transitioning from frameworks like Semantic Kernel or AutoGen, offering detailed practices to leverage these features effectively.",
      "tags": [
        "documentation",
        "middleware",
        "agent",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Agents\\Agent_Step17_BackgroundResponses\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Agents\\Agent_Step17_BackgroundResponses\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide demonstrates the implementation and application of background responses in the Agent Framework using OpenAI's APIs, focusing on both non-streaming polling and resumption of interrupted streaming responses. Developers transitioning from frameworks like Semantic Kernel or LangChain will find this documentation beneficial in utilizing long-running operations effectively.",
      "tags": [
        "documentation",
        "agent",
        "background",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README provides detailed instructions on utilizing the Model Context Protocol (MCP) server with the Agent Framework. It highlights the usage of MCP-based tools by connecting an agent, accessing tools, and invoking functions dynamically. Ideal for developers migrating from frameworks like Semantic Kernel or LangChain to understand protocol interoperability and tool integration.",
      "tags": [
        "tutorial",
        "agent",
        "intermediate",
        "tools"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server_Auth\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\Agent_MCP_Server_Auth\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This documentation provides a comprehensive guide to connecting the Agent Framework with a protected Model Context Protocol (MCP) server utilizing OAuth 2.0 authentication. It demonstrates the setup and execution of secure communication, including tool integration and invocation, making it ideal for developers migrating from other frameworks like LangChain when implementing structured environment integrations with LLM providers.",
      "tags": [
        "documentation",
        "tutorial",
        "agent",
        "oauth"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\ModelContextProtocol\\FoundryAgent_Hosted_MCP\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\ModelContextProtocol\\FoundryAgent_Hosted_MCP\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README provides essential information for setting up and utilizing the FoundryAgent hosted MCP, a component of the Agent Framework, designed to connect with Azure Foundry services for advanced conversational AI capabilities. It explains prerequisites and environment configuration steps vital for beginners transitioning from other frameworks like AutoGen, Semantic Kernel, or LangChain.",
      "tags": [
        "documentation",
        "agent",
        "beginner",
        "autogen_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Declarative\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This README documentation illustrates the usage of the Agent Framework for executing declarative Foundry workflows using YAML definitions in .NET applications. It provides step-by-step instructions to configure project settings, define necessary secrets, and set up required agents for successful operation. This guide is particularly useful for developers transitioning from frameworks such as Semantic Kernel or adopting a declarative approach for workflow management.",
      "tags": [
        "documentation",
        "agent",
        "workflow",
        "tutorial"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\Visualization\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\Visualization\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide provides an example of workflow visualization using advanced serialization techniques such as Mermaid strings and DOT graph representation. Developers migrating from other frameworks such as Semantic Kernel or LangChain can leverage these visualization tools particularly when handling map-reduce or fan-out/fan-in patterns.",
      "tags": [
        "documentation",
        "workflow",
        "intermediate",
        "semantic_kernel_migration"
      ]
    },
    {
      "name": "GettingStarted_documentation",
      "category": "GettingStarted",
      "file_path": "dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\07_MixedWorkflowAgentsAndExecutors\\README.md",
      "github_url": "https://github.com/microsoft/agent-framework/blob/main/dotnet\\samples\\GettingStarted\\Workflows\\_Foundational\\07_MixedWorkflowAgentsAndExecutors\\README.md",
      "language": "dotnet",
      "type": "documentation",
      "processed": true,
      "description": "This guide focuses on integrating AI agents with custom executors within workflows using the Agent Framework, showcasing patterns such as sequential processing, adapter design, and real-time streaming integration. Developers migrating from frameworks like AutoGen, Semantic Kernel, or LangChain will find it invaluable for creating dynamic, type-compatible workflows with advanced content moderation and decision-making capabilities.",
      "tags": [
        "documentation",
        "agent",
        "workflow",
        "semantic_kernel_migration"
      ]
    }
  ],
  "generated_at": "2025-10-26T22:49:56.857578Z"
}